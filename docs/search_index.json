[
["index.html", "Introduction to R Part1 Welcome", " Introduction to R Sarah Bonnin 2019-08-30 Part1 Welcome Dates, time &amp; location Dates: Module 1: Module 2: Module 3: Module 4: Time: 10:00-13:30 Location: CRG Training center Instructors Sarah Bonnin (Module 1, 2, 3) Julia Ponomarenko (Module 4) from the CRG Bioinformatics core facility (office 460, 4th floor hotel side) Learning objectives "],
["what-is-r.html", "Part2 What is R ?", " Part2 What is R ? Programming language and environment for data manipulation, statistical computing, and graphical display. Implementation of the S programming language Created at the University of Auckland, New Zealand: Initial version released in 1995 Stable version released in 2000 Free and open source ! https://www.r-project.org/ Interactive, flexible Very active community of developers and users! Many resources and forums available Access through a command-line interpreter: "],
["what-is-rstudio.html", "Part3 What is RStudio ?", " Part3 What is RStudio ? Free and open source IDE (Integrated Development Environment) for R Available for Windows, Mac OS and LINUX "],
["rstudio-access.html", "3.1 RStudio access", " 3.1 RStudio access RStudio Desktop installation RStudio access from the CRG server Access with CRG credentials For those who don’t have access to the CRG server, use the guest accounts. "],
["rstudio-interface.html", "3.2 RStudio interface", " 3.2 RStudio interface 4 panels: top-left: scripts and files bottom-left: R terminal top-right: objects, history and environment bottom-right: tree of folders, graph window, packages, help window, viewer "],
["setting-up-the-folder-structure-for-the-course.html", "3.3 Setting up the folder structure for the course", " 3.3 Setting up the folder structure for the course Rcourse |-Module1 |-Module2 |-Module3 |-Module4 "],
["paths-and-directories.html", "Part4 Paths and directories", " Part4 Paths and directories The path of a file/directory is its location/address in the file system. Your home directory is the one that hosts your personal folder: for CRG users: /nfs/users/[yourgroup]/[yourusername] "],
["tree-of-directories.html", "4.1 Tree of directories", " 4.1 Tree of directories ~: shortcut to the home directory .: current directory ..: one directory up the tree "],
["navigate-the-tree-of-directory-with-the-r-terminal.html", "4.2 Navigate the tree of directory with the R terminal", " 4.2 Navigate the tree of directory with the R terminal Get the path of the current directory (know where you are working at the moment) with getwd (get working directory): getwd() Change working directory with setwd (set working directory) Go to a directory giving the absolute path: setwd(&quot;~/Rcourse&quot;) Go to a directory giving the relative path: setwd(&quot;Module1&quot;) You are now in: “~/Rcourse/Module1” Move one directory “up” the tree: setwd(&quot;..&quot;) You are now in: “~/Rcourse” "],
["r-basics.html", "Part5 R basics ", " Part5 R basics "],
["arithmetic-operators.html", "5.1 Arithmetic operators", " 5.1 Arithmetic operators Operator Function + addition - subtraction / division * multiplication ^ or ** exponential In the R terminal: 10 - 2 ## [1] 8 Type Enter for R to interpret the command. "],
["simple-calculations.html", "5.2 Simple calculations", " 5.2 Simple calculations Given the following table: type of RNA Total mRNA 329 miRNA 45 snoRNA 12 lncRNA 28 Calculate the total number of RNAs reported in the table: 329 + 45 + 12 + 28 ## [1] 414 What is the percentage of miRNA? ( 45 / 414 ) * 100 ## [1] 10.86957 "],
["objects-in-r.html", "5.3 Objects in R", " 5.3 Objects in R Everything that stores any kind of data in R is an object: #R syntax "],
["assignment-operators.html", "5.4 Assignment operators", " 5.4 Assignment operators &lt;- or = Essentially the same but, to avoid confusions: Use &lt;- for assignments Keep = for functions arguments "],
["assigning-data-to-an-object.html", "5.5 Assigning data to an object", " 5.5 Assigning data to an object Assigning a value to the object B: B &lt;- 10 Reassigning: modifying the content of an object: B + 10 B unchanged !! B &lt;- B + 10 B changed !! You can see the objects you created in the upper right panel in RStudio: the environment. "],
["functions.html", "Part6 Functions", " Part6 Functions In programming, a function is a section of a program that performs a specific task. For example, the function getwd is used as: getwd() and has the task of outputting the current working directory. You can recognize a function with the round brackets: function() A function can also take arguments/parameters setwd(dir=&quot;Rcourse&quot;) setwd changes the current working directory and takes one argument dir. Assign the output of a function to an object: Getting help: From the terminal: help(getwd) ?getwd From the RStudio bottom-right panel: The help pages show: required/optional argument(s), if any. default values for each argument(s), if any. examples. detailed description. Get the example of a function: example(mean) ## ## mean&gt; ## --------------------------------------------------------------------- ## mean&gt; ## BIND DelayedArray OBJECTS ## mean&gt; ## --------------------------------------------------------------------- ## mean&gt; ## DelayedArray objects can be bound along their 1st (rows) or 2nd ## mean&gt; ## (columns) dimension with rbind() or cbind(). These operations are ## mean&gt; ## equivalent to arbind() and acbind(), respectively, and are all ## mean&gt; ## delayed. ## mean&gt; ## mean&gt; ## On 2D objects: ## mean&gt; library(HDF5Array) ## ## mean&gt; toy_h5 &lt;- system.file(&quot;extdata&quot;, &quot;toy.h5&quot;, package=&quot;HDF5Array&quot;) ## ## mean&gt; h5ls(toy_h5) ## group name otype dclass dim ## 0 / M1 H5I_DATASET FLOAT 10000 x 150 ## 1 / M2 H5I_DATASET FLOAT 150 x 200 ## ## mean&gt; M1 &lt;- HDF5Array(toy_h5, &quot;M1&quot;) ## ## mean&gt; M2 &lt;- HDF5Array(toy_h5, &quot;M2&quot;) ## ## mean&gt; M12 &lt;- rbind(M1, t(M2)) # delayed ## ## mean&gt; M12 ## &lt;10200 x 150&gt; DelayedMatrix object of type &quot;double&quot;: ## [,1] [,2] [,3] ... [,149] [,150] ## [1,] 0.44015009 0.02303051 0.11688992 . 0.6684808 0.9859835 ## [2,] 0.18883376 0.84313244 0.12153315 . 0.2886549 0.2750908 ## [3,] 0.99232698 0.22924928 0.20998143 . 0.4786133 0.7087926 ## [4,] 0.52631346 0.15438076 0.43283016 . 0.8715839 0.5870442 ## [5,] 0.62369062 0.27622849 0.54027815 . 0.3082406 0.2929455 ## ... . . . . . . ## [10196,] 12.7122663 3.0340890 -1.4169923 . 6.924539558 2.991194399 ## [10197,] -1.1921119 12.1553961 10.3398257 . 13.541424135 10.732108410 ## [10198,] 11.2522507 6.2994228 0.8515161 . 3.639222663 -2.787210229 ## [10199,] 4.2025030 14.8541228 0.5208430 . 13.590451800 -0.007439521 ## [10200,] 7.2127450 3.4810124 8.8763231 . 2.134752800 7.164514768 ## ## mean&gt; colMeans(M12) # block-processed ## [1] 0.5847215 0.5976341 0.5955049 0.5898834 0.5838513 0.5954696 0.5794771 ## [8] 0.6017740 0.5907392 0.5921464 0.5972239 0.5886432 0.5893401 0.5796834 ## [15] 0.5832794 0.5984886 0.5789885 0.5981562 0.5994559 0.5902942 0.5964307 ## [22] 0.6017652 0.5909635 0.5860712 0.6012874 0.5906832 0.5743288 0.5757507 ## [29] 0.5903412 0.5894468 0.6071159 0.5902459 0.5924693 0.5931731 0.5849759 ## [36] 0.5987650 0.5686553 0.5954116 0.5929792 0.5807617 0.5858967 0.5768919 ## [43] 0.5849780 0.5969409 0.5945609 0.5873373 0.5985127 0.5845567 0.5835624 ## [50] 0.5800856 0.5959954 0.5941727 0.5985898 0.5870470 0.6016754 0.5971824 ## [57] 0.5831226 0.5983267 0.5776760 0.5897750 0.5999326 0.5885997 0.5859833 ## [64] 0.5898483 0.5900072 0.5802166 0.5715231 0.5925759 0.5869830 0.5853867 ## [71] 0.6074465 0.5927962 0.5836831 0.5884932 0.6034180 0.5994154 0.5905539 ## [78] 0.5871405 0.5956231 0.5997698 0.5948899 0.5921457 0.5785114 0.5849732 ## [85] 0.5893467 0.5836812 0.5997758 0.5696571 0.5831440 0.5806131 0.5908729 ## [92] 0.5834960 0.5965191 0.5861503 0.5967210 0.5776620 0.5914219 0.5981962 ## [99] 0.5892449 0.5991614 0.5872962 0.5842013 0.5884512 0.5855686 0.5818349 ## [106] 0.5931897 0.5872042 0.5784551 0.5808937 0.5800662 0.5910112 0.5863131 ## [113] 0.6002801 0.5898960 0.5901466 0.5949233 0.5946853 0.5901424 0.5939904 ## [120] 0.5931327 0.5913019 0.5958614 0.5839785 0.5904047 0.5854432 0.5929187 ## [127] 0.6018140 0.5920462 0.5989337 0.5951392 0.5878220 0.5809505 0.5850140 ## [134] 0.5848444 0.5824954 0.5911507 0.5864913 0.6020472 0.5830223 0.5879107 ## [141] 0.5743987 0.5840778 0.5876115 0.6024942 0.5866054 0.5940235 0.5877663 ## [148] 0.5967996 0.5944947 0.6009553 ## ## mean&gt; ## On objects with more than 2 dimensions: ## mean&gt; example(arbind) # to create arrays a1, a2, a3 ## ## arbind&gt; a1 &lt;- array(1:60, c(3, 5, 4), ## arbind+ dimnames=list(NULL, paste0(&quot;M1y&quot;, 1:5), NULL)) ## ## arbind&gt; a2 &lt;- array(101:240, c(7, 5, 4), ## arbind+ dimnames=list(paste0(&quot;M2x&quot;, 1:7), paste0(&quot;M2y&quot;, 1:5), NULL)) ## ## arbind&gt; a3 &lt;- array(10001:10100, c(5, 5, 4), ## arbind+ dimnames=list(paste0(&quot;M3x&quot;, 1:5), NULL, paste0(&quot;M3z&quot;, 1:4))) ## ## arbind&gt; arbind(a1, a2, a3) ## , , M3z1 ## ## M1y1 M1y2 M1y3 M1y4 M1y5 ## 1 4 7 10 13 ## 2 5 8 11 14 ## 3 6 9 12 15 ## M2x1 101 108 115 122 129 ## M2x2 102 109 116 123 130 ## M2x3 103 110 117 124 131 ## M2x4 104 111 118 125 132 ## M2x5 105 112 119 126 133 ## M2x6 106 113 120 127 134 ## M2x7 107 114 121 128 135 ## M3x1 10001 10006 10011 10016 10021 ## M3x2 10002 10007 10012 10017 10022 ## M3x3 10003 10008 10013 10018 10023 ## M3x4 10004 10009 10014 10019 10024 ## M3x5 10005 10010 10015 10020 10025 ## ## , , M3z2 ## ## M1y1 M1y2 M1y3 M1y4 M1y5 ## 16 19 22 25 28 ## 17 20 23 26 29 ## 18 21 24 27 30 ## M2x1 136 143 150 157 164 ## M2x2 137 144 151 158 165 ## M2x3 138 145 152 159 166 ## M2x4 139 146 153 160 167 ## M2x5 140 147 154 161 168 ## M2x6 141 148 155 162 169 ## M2x7 142 149 156 163 170 ## M3x1 10026 10031 10036 10041 10046 ## M3x2 10027 10032 10037 10042 10047 ## M3x3 10028 10033 10038 10043 10048 ## M3x4 10029 10034 10039 10044 10049 ## M3x5 10030 10035 10040 10045 10050 ## ## , , M3z3 ## ## M1y1 M1y2 M1y3 M1y4 M1y5 ## 31 34 37 40 43 ## 32 35 38 41 44 ## 33 36 39 42 45 ## M2x1 171 178 185 192 199 ## M2x2 172 179 186 193 200 ## M2x3 173 180 187 194 201 ## M2x4 174 181 188 195 202 ## M2x5 175 182 189 196 203 ## M2x6 176 183 190 197 204 ## M2x7 177 184 191 198 205 ## M3x1 10051 10056 10061 10066 10071 ## M3x2 10052 10057 10062 10067 10072 ## M3x3 10053 10058 10063 10068 10073 ## M3x4 10054 10059 10064 10069 10074 ## M3x5 10055 10060 10065 10070 10075 ## ## , , M3z4 ## ## M1y1 M1y2 M1y3 M1y4 M1y5 ## 46 49 52 55 58 ## 47 50 53 56 59 ## 48 51 54 57 60 ## M2x1 206 213 220 227 234 ## M2x2 207 214 221 228 235 ## M2x3 208 215 222 229 236 ## M2x4 209 216 223 230 237 ## M2x5 210 217 224 231 238 ## M2x6 211 218 225 232 239 ## M2x7 212 219 226 233 240 ## M3x1 10076 10081 10086 10091 10096 ## M3x2 10077 10082 10087 10092 10097 ## M3x3 10078 10083 10088 10093 10098 ## M3x4 10079 10084 10089 10094 10099 ## M3x5 10080 10085 10090 10095 10100 ## ## ## mean&gt; A1 &lt;- DelayedArray(a1) ## ## mean&gt; A2 &lt;- DelayedArray(a2) ## ## mean&gt; A3 &lt;- DelayedArray(a3) ## ## mean&gt; A123 &lt;- rbind(A1, A2, A3) # delayed ## ## mean&gt; A123 ## &lt;15 x 5 x 4&gt; DelayedArray object of type &quot;integer&quot;: ## ,,M3z1 ## M1y1 M1y2 M1y3 M1y4 M1y5 ## 1 4 7 10 13 ## 2 5 8 11 14 ## ... . . . . . ## M3x4 10004 10009 10014 10019 10024 ## M3x5 10005 10010 10015 10020 10025 ## ## ... ## ## ,,M3z4 ## M1y1 M1y2 M1y3 M1y4 M1y5 ## 46 49 52 55 58 ## 47 50 53 56 59 ## ... . . . . . ## M3x4 10079 10084 10089 10094 10099 ## M3x5 10080 10085 10090 10095 10100 ## ## ## mean&gt; ## On 1D objects: ## mean&gt; v1 &lt;- array(11:15, 5, dimnames=list(LETTERS[1:5])) ## ## mean&gt; v2 &lt;- array(letters[1:3]) ## ## mean&gt; V1 &lt;- DelayedArray(v1) ## ## mean&gt; V2 &lt;- DelayedArray(v2) ## ## mean&gt; V12 &lt;- rbind(V1, V2) ## ## mean&gt; V12 ## &lt;8&gt; DelayedArray object of type &quot;character&quot;: ## A B C . ## &quot;11&quot; &quot;12&quot; &quot;13&quot; . &quot;b&quot; &quot;c&quot; ## ## mean&gt; ## Not run: ## mean&gt; ##D cbind(V1, V2) # Error! (the objects to cbind() must have at least 2 ## mean&gt; ##D # dimensions) ## mean&gt; ## End(Not run) ## mean&gt; ## mean&gt; ## Note that base::rbind() and base::cbind() do something completely ## mean&gt; ## different on ordinary arrays that are not matrices. They treat them ## mean&gt; ## as if they were vectors: ## mean&gt; rbind(a1, a2, a3) ## Warning in rbind(...): number of columns of result is not a multiple of ## vector length (arg 1) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] ## a1 1 2 3 4 5 6 7 8 9 10 11 12 ## a2 101 102 103 104 105 106 107 108 109 110 111 112 ## a3 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 10011 10012 ## [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] ## a1 13 14 15 16 17 18 19 20 21 22 23 24 ## a2 113 114 115 116 117 118 119 120 121 122 123 124 ## a3 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 10024 ## [,25] [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] ## a1 25 26 27 28 29 30 31 32 33 34 35 36 ## a2 125 126 127 128 129 130 131 132 133 134 135 136 ## a3 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 ## [,37] [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] ## a1 37 38 39 40 41 42 43 44 45 46 47 48 ## a2 137 138 139 140 141 142 143 144 145 146 147 148 ## a3 10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 ## [,49] [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] ## a1 49 50 51 52 53 54 55 56 57 58 59 60 ## a2 149 150 151 152 153 154 155 156 157 158 159 160 ## a3 10049 10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 ## [,61] [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] ## a1 1 2 3 4 5 6 7 8 9 10 11 12 ## a2 161 162 163 164 165 166 167 168 169 170 171 172 ## a3 10061 10062 10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 ## [,73] [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] ## a1 13 14 15 16 17 18 19 20 21 22 23 24 ## a2 173 174 175 176 177 178 179 180 181 182 183 184 ## a3 10073 10074 10075 10076 10077 10078 10079 10080 10081 10082 10083 10084 ## [,85] [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] ## a1 25 26 27 28 29 30 31 32 33 34 35 36 ## a2 185 186 187 188 189 190 191 192 193 194 195 196 ## a3 10085 10086 10087 10088 10089 10090 10091 10092 10093 10094 10095 10096 ## [,97] [,98] [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] ## a1 37 38 39 40 41 42 43 44 45 46 ## a2 197 198 199 200 201 202 203 204 205 206 ## a3 10097 10098 10099 10100 10001 10002 10003 10004 10005 10006 ## [,107] [,108] [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] ## a1 47 48 49 50 51 52 53 54 55 56 ## a2 207 208 209 210 211 212 213 214 215 216 ## a3 10007 10008 10009 10010 10011 10012 10013 10014 10015 10016 ## [,117] [,118] [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] ## a1 57 58 59 60 1 2 3 4 5 6 ## a2 217 218 219 220 221 222 223 224 225 226 ## a3 10017 10018 10019 10020 10021 10022 10023 10024 10025 10026 ## [,127] [,128] [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] ## a1 7 8 9 10 11 12 13 14 15 16 ## a2 227 228 229 230 231 232 233 234 235 236 ## a3 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 ## [,137] [,138] [,139] [,140] ## a1 17 18 19 20 ## a2 237 238 239 240 ## a3 10037 10038 10039 10040 ## ## mean&gt; cbind(a1, a2, a3) ## Warning in cbind(...): number of rows of result is not a multiple of vector ## length (arg 1) ## a1 a2 a3 ## [1,] 1 101 10001 ## [2,] 2 102 10002 ## [3,] 3 103 10003 ## [4,] 4 104 10004 ## [5,] 5 105 10005 ## [6,] 6 106 10006 ## [7,] 7 107 10007 ## [8,] 8 108 10008 ## [9,] 9 109 10009 ## [10,] 10 110 10010 ## [11,] 11 111 10011 ## [12,] 12 112 10012 ## [13,] 13 113 10013 ## [14,] 14 114 10014 ## [15,] 15 115 10015 ## [16,] 16 116 10016 ## [17,] 17 117 10017 ## [18,] 18 118 10018 ## [19,] 19 119 10019 ## [20,] 20 120 10020 ## [21,] 21 121 10021 ## [22,] 22 122 10022 ## [23,] 23 123 10023 ## [24,] 24 124 10024 ## [25,] 25 125 10025 ## [26,] 26 126 10026 ## [27,] 27 127 10027 ## [28,] 28 128 10028 ## [29,] 29 129 10029 ## [30,] 30 130 10030 ## [31,] 31 131 10031 ## [32,] 32 132 10032 ## [33,] 33 133 10033 ## [34,] 34 134 10034 ## [35,] 35 135 10035 ## [36,] 36 136 10036 ## [37,] 37 137 10037 ## [38,] 38 138 10038 ## [39,] 39 139 10039 ## [40,] 40 140 10040 ## [41,] 41 141 10041 ## [42,] 42 142 10042 ## [43,] 43 143 10043 ## [44,] 44 144 10044 ## [45,] 45 145 10045 ## [46,] 46 146 10046 ## [47,] 47 147 10047 ## [48,] 48 148 10048 ## [49,] 49 149 10049 ## [50,] 50 150 10050 ## [51,] 51 151 10051 ## [52,] 52 152 10052 ## [53,] 53 153 10053 ## [54,] 54 154 10054 ## [55,] 55 155 10055 ## [56,] 56 156 10056 ## [57,] 57 157 10057 ## [58,] 58 158 10058 ## [59,] 59 159 10059 ## [60,] 60 160 10060 ## [61,] 1 161 10061 ## [62,] 2 162 10062 ## [63,] 3 163 10063 ## [64,] 4 164 10064 ## [65,] 5 165 10065 ## [66,] 6 166 10066 ## [67,] 7 167 10067 ## [68,] 8 168 10068 ## [69,] 9 169 10069 ## [70,] 10 170 10070 ## [71,] 11 171 10071 ## [72,] 12 172 10072 ## [73,] 13 173 10073 ## [74,] 14 174 10074 ## [75,] 15 175 10075 ## [76,] 16 176 10076 ## [77,] 17 177 10077 ## [78,] 18 178 10078 ## [79,] 19 179 10079 ## [80,] 20 180 10080 ## [81,] 21 181 10081 ## [82,] 22 182 10082 ## [83,] 23 183 10083 ## [84,] 24 184 10084 ## [85,] 25 185 10085 ## [86,] 26 186 10086 ## [87,] 27 187 10087 ## [88,] 28 188 10088 ## [89,] 29 189 10089 ## [90,] 30 190 10090 ## [91,] 31 191 10091 ## [92,] 32 192 10092 ## [93,] 33 193 10093 ## [94,] 34 194 10094 ## [95,] 35 195 10095 ## [96,] 36 196 10096 ## [97,] 37 197 10097 ## [98,] 38 198 10098 ## [99,] 39 199 10099 ## [100,] 40 200 10100 ## [101,] 41 201 10001 ## [102,] 42 202 10002 ## [103,] 43 203 10003 ## [104,] 44 204 10004 ## [105,] 45 205 10005 ## [106,] 46 206 10006 ## [107,] 47 207 10007 ## [108,] 48 208 10008 ## [109,] 49 209 10009 ## [110,] 50 210 10010 ## [111,] 51 211 10011 ## [112,] 52 212 10012 ## [113,] 53 213 10013 ## [114,] 54 214 10014 ## [115,] 55 215 10015 ## [116,] 56 216 10016 ## [117,] 57 217 10017 ## [118,] 58 218 10018 ## [119,] 59 219 10019 ## [120,] 60 220 10020 ## [121,] 1 221 10021 ## [122,] 2 222 10022 ## [123,] 3 223 10023 ## [124,] 4 224 10024 ## [125,] 5 225 10025 ## [126,] 6 226 10026 ## [127,] 7 227 10027 ## [128,] 8 228 10028 ## [129,] 9 229 10029 ## [130,] 10 230 10030 ## [131,] 11 231 10031 ## [132,] 12 232 10032 ## [133,] 13 233 10033 ## [134,] 14 234 10034 ## [135,] 15 235 10035 ## [136,] 16 236 10036 ## [137,] 17 237 10037 ## [138,] 18 238 10038 ## [139,] 19 239 10039 ## [140,] 20 240 10040 ## ## mean&gt; rbind(v1, v2) ## Warning in rbind(...): number of columns of result is not a multiple of ## vector length (arg 2) ## A B C D E ## v1 &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; ## v2 &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;a&quot; &quot;b&quot; ## ## mean&gt; cbind(v1, v2) ## Warning in cbind(...): number of rows of result is not a multiple of vector ## length (arg 2) ## v1 v2 ## A &quot;11&quot; &quot;a&quot; ## B &quot;12&quot; &quot;b&quot; ## C &quot;13&quot; &quot;c&quot; ## D &quot;14&quot; &quot;a&quot; ## E &quot;15&quot; &quot;b&quot; ## ## mean&gt; ## Also note that DelayedArray objects of arbitrary dimensions can be ## mean&gt; ## stored inside a DataFrame object as long as they all have the same ## mean&gt; ## first dimension (nrow()): ## mean&gt; DF &lt;- DataFrame(M=I(tail(M1, n=5)), A=I(A3), V=I(V1)) ## ## mean&gt; DF[-3, ] ## DataFrame with 4 rows and 3 columns ## M ## &lt;DelayedMatrix&gt; ## 1 0.691832306561992:0.493223202414811:0.692104285117239:... ## 2 0.0157738912384957:0.641924865543842:0.706047241110355:... ## 3 0.291226184694096:0.217180676292628:0.548560027033091:... ## 4 0.875399844022468:0.346653513377532:0.0666172914206982:... ## A V ## &lt;DelayedArray&gt; &lt;DelayedArray&gt; ## 1 10001:10006:10011:... 11 ## 2 10002:10007:10012:... 12 ## 3 10004:10009:10014:... 14 ## 4 10005:10010:10015:... 15 ## ## mean&gt; DF2 &lt;- rbind(DF, DF) ## ## mean&gt; DF2$V ## &lt;10&gt; DelayedArray object of type &quot;integer&quot;: ## A B C D . B C D E ## 11 12 13 14 . 12 13 14 15 ## ## mean&gt; ## Sanity checks: ## mean&gt; m1 &lt;- as.matrix(M1) ## ## mean&gt; m2 &lt;- as.matrix(M2) ## ## mean&gt; stopifnot(identical(rbind(m1, t(m2)), as.matrix(M12))) ## ## mean&gt; stopifnot(identical(arbind(a1, a2, a3), as.array(A123))) ## ## mean&gt; stopifnot(identical(arbind(v1, v2), as.array(V12))) ## ## mean&gt; stopifnot(identical(rbind(DF$M, DF$M), DF2$M)) ## ## mean&gt; stopifnot(identical(rbind(DF$A, DF$A), DF2$A)) ## ## mean&gt; stopifnot(identical(rbind(DF$V, DF$V), DF2$V)) ## ## mean&gt; ## --------------------------------------------------------------------- ## mean&gt; ## MORE OPERATIONS ## mean&gt; ## --------------------------------------------------------------------- ## mean&gt; ## mean&gt; M1 &gt;= 0.5 &amp; M1 &lt; 0.75 # delayed ## &lt;10000 x 150&gt; DelayedMatrix object of type &quot;logical&quot;: ## [,1] [,2] [,3] ... [,149] [,150] ## [1,] FALSE FALSE FALSE . TRUE FALSE ## [2,] FALSE FALSE FALSE . FALSE FALSE ## [3,] FALSE FALSE FALSE . FALSE TRUE ## [4,] TRUE FALSE FALSE . FALSE TRUE ## [5,] TRUE FALSE TRUE . FALSE FALSE ## ... . . . . . . ## [9996,] TRUE FALSE TRUE . TRUE FALSE ## [9997,] FALSE TRUE TRUE . FALSE FALSE ## [9998,] TRUE FALSE TRUE . FALSE FALSE ## [9999,] FALSE FALSE TRUE . FALSE FALSE ## [10000,] FALSE FALSE FALSE . TRUE FALSE ## ## mean&gt; log(M1) # delayed ## &lt;10000 x 150&gt; DelayedMatrix object of type &quot;double&quot;: ## [,1] [,2] [,3] ... [,149] ## [1,] -0.820639505 -3.770935241 -2.146522675 . -0.40274758 ## [2,] -1.666888233 -0.170631225 -2.107568204 . -1.24252354 ## [3,] -0.007702612 -1.472945288 -1.560736183 . -0.73686236 ## [4,] -0.641858317 -1.868333264 -0.837409871 . -0.13744310 ## [5,] -0.472100843 -1.286526883 -0.615671174 . -1.17687460 ## ... . . . . . ## [9996,] -0.3684117 -0.7067935 -0.3680186 . -0.68306548 ## [9997,] -4.1493992 -0.4432840 -0.3480731 . -0.21275385 ## [9998,] -0.6566335 -0.2402248 -0.6626868 . -0.27081827 ## [9999,] -1.2336550 -1.5270257 -0.6004586 . -1.92866532 ## [10000,] -0.1330745 -1.0594295 -2.7087911 . -0.33689843 ## [,150] ## [1,] -0.01411563 ## [2,] -1.29065419 ## [3,] -0.34419236 ## [4,] -0.53265512 ## [5,] -1.22776874 ## ... . ## [9996,] -1.74293095 ## [9997,] -2.36738637 ## [9998,] -1.69440209 ## [9999,] -0.02557344 ## [10000,] -1.50777810 ## ## mean&gt; pmax2(M2, 0) # delayed ## &lt;150 x 200&gt; DelayedMatrix object of type &quot;double&quot;: ## [,1] [,2] [,3] ... [,199] [,200] ## [1,] 9.0325451 0.0000000 0.0000000 . 4.202503 7.212745 ## [2,] 0.5603696 1.4590217 1.6268596 . 14.854123 3.481012 ## [3,] 8.1094489 2.9110584 12.7574103 . 0.520843 8.876323 ## [4,] 5.8518510 6.4912588 13.8403073 . 8.795605 12.342113 ## [5,] 0.0000000 10.1040618 10.6219819 . 8.756145 3.130079 ## ... . . . . . . ## [146,] 11.2827878 0.0000000 5.4538427 . 0.0000000 6.0707772 ## [147,] 0.0000000 10.5172435 0.0000000 . 0.8243989 0.0000000 ## [148,] 0.9635204 13.8644578 11.6860867 . 5.7615046 1.6889923 ## [149,] 12.6951503 11.6835890 13.4213585 . 13.5904518 2.1347528 ## [150,] 0.0000000 9.9152485 8.6534266 . 0.0000000 7.1645148 ## ## mean&gt; ## table() is block-processed: ## mean&gt; a4 &lt;- array(sample(50L, 2000000L, replace=TRUE), c(200, 4, 2500)) ## ## mean&gt; A4 &lt;- as(a4, &quot;HDF5Array&quot;) ## ## mean&gt; table(A4) ## A4 ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 39947 40047 39897 39844 40307 40011 40510 39788 40099 39925 39884 40265 ## 13 14 15 16 17 18 19 20 21 22 23 24 ## 40520 39857 40111 40036 40153 40189 40214 40079 39998 39873 39903 40054 ## 25 26 27 28 29 30 31 32 33 34 35 36 ## 40145 39982 40084 39717 39940 40122 39880 39928 40149 40035 39759 39655 ## 37 38 39 40 41 42 43 44 45 46 47 48 ## 40213 39728 40140 40235 40008 39830 39780 39584 39889 39667 40039 39992 ## 49 50 ## 39989 39999 ## ## mean&gt; a5 &lt;- array(sample(20L, 2000000L, replace=TRUE), c(200, 4, 2500)) ## ## mean&gt; A5 &lt;- as(a5, &quot;HDF5Array&quot;) ## ## mean&gt; table(A5) ## A5 ## 1 2 3 4 5 6 7 8 9 10 ## 100031 99697 99515 100070 100304 100108 100562 100364 100011 100038 ## 11 12 13 14 15 16 17 18 19 20 ## 100559 99980 99985 99970 99511 100036 99649 100089 100135 99386 ## ## mean&gt; A4 - 2 * A5 # delayed ## &lt;200 x 4 x 2500&gt; DelayedArray object of type &quot;double&quot;: ## ,,1 ## [,1] [,2] [,3] [,4] ## [1,] 4 -13 18 43 ## [2,] 9 -11 10 -6 ## ... . . . . ## [199,] -1 -18 23 -7 ## [200,] -29 -23 -7 -10 ## ## ... ## ## ,,2500 ## [,1] [,2] [,3] [,4] ## [1,] -3 22 13 7 ## [2,] -22 -6 -18 8 ## ... . . . . ## [199,] 7 -1 -33 8 ## [200,] -29 14 -4 7 ## ## ## mean&gt; table(A4 - 2 * A5) # block-processed ## ## -39 -38 -37 -36 -35 -34 -33 -32 -31 -30 -29 -28 ## 1931 2006 4010 4017 6019 5937 8084 7898 10188 9953 12031 12077 ## -27 -26 -25 -24 -23 -22 -21 -20 -19 -18 -17 -16 ## 13978 13857 15893 16009 17956 17924 20152 20008 21995 22028 24176 24176 ## -15 -14 -13 -12 -11 -10 -9 -8 -7 -6 -5 -4 ## 26133 25919 28060 27841 29903 30059 32104 32023 34538 34029 35657 35985 ## -3 -2 -1 0 1 2 3 4 5 6 7 8 ## 37827 37775 39931 39940 40175 39855 40355 39610 39853 40217 40028 40120 ## 9 10 11 12 13 14 15 16 17 18 19 20 ## 40219 39979 38152 38422 36019 35828 34245 34118 32007 32103 30027 29724 ## 21 22 23 24 25 26 27 28 29 30 31 32 ## 27830 27919 26343 25810 23787 23770 21833 21946 20040 19888 18019 18004 ## 33 34 35 36 37 38 39 40 41 42 43 44 ## 16105 15866 14075 14004 12063 11859 9925 10010 7933 7942 5997 5955 ## 45 46 47 48 ## 3999 3979 1963 2053 ## ## mean&gt; ## range() is block-processed: ## mean&gt; range(A4 - 2 * A5) ## [1] -39 48 ## ## mean&gt; range(M1) ## [1] 1.552980e-07 9.999996e-01 ## ## mean&gt; cmeans &lt;- colMeans(M2) # block-processed ## ## mean&gt; sweep(M2, 2, cmeans) # delayed ## &lt;150 x 200&gt; DelayedMatrix object of type &quot;double&quot;: ## [,1] [,2] [,3] ... [,199] [,200] ## [1,] 3.179596290 -6.007761793 -8.412091983 . -0.8003207 2.1640017 ## [2,] -5.292579210 -3.711450706 -3.719668984 . 9.8512991 -1.5677309 ## [3,] 2.256500074 -2.259413940 7.410881678 . -4.4819808 3.8275799 ## [4,] -0.001097857 1.320786373 8.493778725 . 3.7927808 7.2933693 ## [5,] -6.673570643 4.933589464 5.275453297 . 3.7533212 -1.9186641 ## ... . . . . . . ## [146,] 5.4298390 -8.9513384 0.1073141 . -5.7655952 1.0220339 ## [147,] -8.1689326 5.3467711 -8.3246410 . -4.1784249 -8.2029228 ## [148,] -4.8894284 8.6939854 6.3395581 . 0.7586808 -3.3597509 ## [149,] 6.8422014 6.5131166 8.0748300 . 8.5876280 -2.9139904 ## [150,] -7.7401472 4.7447762 3.3068980 . -5.0102633 2.1157715 ## ## mean&gt; ## --------------------------------------------------------------------- ## mean&gt; ## MATRIX MULTIPLICATION ## mean&gt; ## --------------------------------------------------------------------- ## mean&gt; ## mean&gt; ## Matrix multiplication is not delayed: the output matrix is realized ## mean&gt; ## block by block. The current &quot;realization backend&quot; controls where ## mean&gt; ## realization happens e.g. in memory if set to NULL or in an HDF5 file ## mean&gt; ## if set to &quot;HDF5Array&quot;. See &#39;?realize&#39; for more information about ## mean&gt; ## &quot;realization backends&quot;. ## mean&gt; ## The output matrix is returned as a DelayedMatrix object with no delayed ## mean&gt; ## operations on it. The exact class of the object depends on the backend ## mean&gt; ## e.g. it will be HDF5Matrix with &quot;HDF5Array&quot; backend. ## mean&gt; ## mean&gt; m &lt;- matrix(runif(50000), ncol=nrow(M1)) ## ## mean&gt; ## Set backend to NULL for in-memory realization: ## mean&gt; setRealizationBackend() ## ## mean&gt; P1 &lt;- m %*% M1 ## ## mean&gt; P1 ## &lt;5 x 150&gt; DelayedMatrix object of type &quot;double&quot;: ## [,1] [,2] [,3] ... [,149] [,150] ## [1,] 2488.305 2504.537 2502.398 . 2522.300 2520.533 ## [2,] 2484.329 2497.322 2455.038 . 2488.539 2514.187 ## [3,] 2483.766 2509.021 2488.132 . 2509.284 2526.275 ## [4,] 2493.242 2514.513 2480.275 . 2510.809 2542.347 ## [5,] 2473.235 2497.997 2474.666 . 2504.486 2522.846 ## ## mean&gt; ## Set backend to HDF5Array for realization in HDF5 file: ## mean&gt; setRealizationBackend(&quot;HDF5Array&quot;) ## ## mean&gt; ## With the HDF5Array backend, the output matrix will be written to an ## mean&gt; ## automatic location on disk: ## mean&gt; getHDF5DumpFile() # HDF5 file where the output matrix will be written ## [1] &quot;/tmp/RtmpLVqART/HDF5Array_dump/auto00064.h5&quot; ## ## mean&gt; lsHDF5DumpFile() ## [1] group name otype dclass dim ## &lt;0 rows&gt; (or 0-length row.names) ## ## mean&gt; P2 &lt;- m %*% M1 ## ## mean&gt; P2 ## &lt;5 x 150&gt; HDF5Matrix object of type &quot;double&quot;: ## [,1] [,2] [,3] ... [,149] [,150] ## [1,] 2488.305 2504.537 2502.398 . 2522.300 2520.533 ## [2,] 2484.329 2497.322 2455.038 . 2488.539 2514.187 ## [3,] 2483.766 2509.021 2488.132 . 2509.284 2526.275 ## [4,] 2493.242 2514.513 2480.275 . 2510.809 2542.347 ## [5,] 2473.235 2497.997 2474.666 . 2504.486 2522.846 ## ## mean&gt; lsHDF5DumpFile() ## [1] group name otype dclass dim ## &lt;0 rows&gt; (or 0-length row.names) ## ## mean&gt; ## Use setHDF5DumpFile() and setHDF5DumpName() from the HDF5Array package ## mean&gt; ## to control the location of automatically created HDF5 datasets. ## mean&gt; ## mean&gt; stopifnot(identical(as.array(P1), as.array(P2))) Need more help? Ask your favourite Web search engine ! Note on arguments The help page shows the compulsory arguments in the Usage section: in the help page of getwd and setwd (above), you can see that getwd doesn’t take any compulsory argument, and setwd takes one compulsory argument that is called dir. Compulsory arguments can be given with their names: in such case you don’t need to respect a specific order, or without their names, in which case you have to respect the order specified in the help page! For example, the rep.int function (a variant of the rep function) takes 2 arguments (see in help page): x and times, in that order: # use arguments with their names: rep.int(x=1, times=3) ## [1] 1 1 1 # use arguments with their names without respecting the order: rep.int(times=3, x=1) ## [1] 1 1 1 # use arguments without their names but respecting the order: rep.int(1, 3) ## [1] 1 1 1 # use arguments without their names without respecting the order: rep.int(3, 1) ## [1] 3 # It works, but is not giving the expected output! "],
["r-scripts.html", "Part7 R scripts ", " Part7 R scripts "],
["create-and-save-a-script.html", "7.1 Create and save a script", " 7.1 Create and save a script Store commands in a .R/.r script. Create and save a script in RStudio with: File -&gt; New File -&gt; R Script Once the file has opened: File -&gt; Save Specify a name: the extension .R is automatically added Execute commands or blocks of commands from RStudio: "],
["r-syntax.html", "7.2 R syntax", " 7.2 R syntax Case sensitive: g is not G Comment lines start with # Commands are separated by a new line or ; # This is a comment: it will not be interpreted a &lt;- 10 A + 1 # Will throw an error because A and a are different "],
["rstudio-tips-in-the-console.html", "7.3 RStudio tips in the console", " 7.3 RStudio tips in the console Ctrl + Enter: execute the current line. Upper arrow: goes to the commands previously typed. Ctrl + cmd + : Browse command history. Type a letter in the console + “tab”: R Studio proposes the different functions or object stored which start with that letter. for example, type get + “tab”: "],
["exercice-1-getting-started-.html", "7.4 Exercice 1. Getting started.", " 7.4 Exercice 1. Getting started. Create the script “exercise1.R” (in R Studio: File -&gt; New File) and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 1 in that script. Remember you can comment the code using #. 1- From the terminal, go to Rcourse/Module1. First check where you currently are with getwd(); then go to Rcourse/Module1 with setwd() correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 2- Using R as a calculator, calculate the square root of 654. correction sqrt(654) ## [1] 25.57342 3- Using R as a calculator, calculate the percentage of males and females currently present in the classroom. correction # 6 males out of 19 students: (6/19) * 100 ## [1] 31.57895 # 13 females out of 19 students (13/19) * 100 ## [1] 68.42105 4- Create a new object “myobject” with value 60. Show “myobject” in the terminal. correction myobject &lt;- 60 myobject ## [1] 60 5- Reassign myobject with value 87. correction myobject &lt;- 87 6- Subtract 1 to myobject. Reassign. correction myobject &lt;- myobject - 1 7- Create a new object “mysqrt” that will store the square root of “myobject”. correction mysqrt &lt;- sqrt(myobject) 8- Create a new object “mydiv” that will store the result of “myobject” divided by “mysqrt”. correction mydiv &lt;- myobject / mysqrt "],
["data-types.html", "Part8 Data types", " Part8 Data types Each object has a data type: * Numeric (number - integer or double) * Character (text) * Logical (TRUE / FALSE) ##Checking data types Number: a &lt;- 10 mode(a) ## [1] &quot;numeric&quot; typeof(a) ## [1] &quot;double&quot; str(a) ## num 10 Text: b &lt;- &quot;word&quot; mode(b) ## [1] &quot;character&quot; typeof(b) ## [1] &quot;character&quot; str(b) ## chr &quot;word&quot; "],
["data-structures.html", "Part9 Data structures", " Part9 Data structures The main data structures are: Vector Factor Matrix Data frame "],
["vectors.html", "9.1 Vectors", " 9.1 Vectors A vector is a sequence of data elements from the same type. 329 | 45 | 12 | 28 | 9.1.1 Creating a vector Values are assigned to a vector using the c command (combining elements). a &lt;- c(329, 45, 12, 28) You can create an empty vector with: vecempty &lt;- vector() Create a sequence of consecutive numbers: a &lt;- 1:6 # same as: a &lt;- c(1, 2, 3, 4, 5, 6) # both ends (1 and 6) are included Character vectors: Each element is entered between (single or double) quotes. mRNA | miRNA | snoRNA | lncRNA | b &lt;- c(&quot;mRNA&quot;, &quot;miRNA&quot;, &quot;snoRNA&quot;, &quot;lncRNA&quot;) 9.1.2 Vector manipulation A vector can be named: each element of the vector can be assigned a name (number or character) names(a) &lt;- c(&quot;mRNA&quot;, &quot;miRNA&quot;, &quot;snoRNA&quot;, &quot;lncRNA&quot;) # use an object which already contains a vector names(a) &lt;- b Get the length (number of elements) of a vector length(a) ## [1] 6 Extracting elements from vector a extract elements using their position (index) in the vector: a &lt;- 1:6 a[1] ## [1] 1 a[c(1,3)] ## [1] 1 3 a[2:4] ## [1] 2 3 4 extract elements using their names: a[&quot;mRNA&quot;] ## [1] NA a[c(&quot;miRNA&quot;, &quot;lncRNA&quot;)] ## [1] NA NA Reassigning a vector’s element a[2] &lt;- 31 a[&quot;miRNA&quot;] &lt;- 31 Removing a vector’s element a &lt;- a[-3] Show versus change x[-2] x unchanged ! x &lt;- x[-2] x reassigned ! 9.1.3 Combining vectors From 2 vectors a and b you can create a vector d a &lt;- 2:5 b &lt;- 4:6 d &lt;- c(a, b) The elements of b are added after the elements of a Likewise, you can add elements at the end of a vector d &lt;- c(d, 19) 9.1.4 Numeric vector manipulation Logical operators Operator Description &lt; less than &lt;= less than or equal to &gt; greater than &gt;= greater than or equal to == exactly equal to != not equal to !x not x x | y x OR y x &amp; y x AND y Which elements of a are equal to 2? a &lt;- 1:5 a == 2 ## [1] FALSE TRUE FALSE FALSE FALSE Which elements of a are superior to 2? a &lt;- 1:5 a &gt; 2 ## [1] FALSE FALSE TRUE TRUE TRUE Extract elements of a vector that comply with a condition: a &lt;- 1:5 a &gt;= 2 ## [1] FALSE TRUE TRUE TRUE TRUE a[a &gt;= 2] ## [1] 2 3 4 5 9.1.4.1 Operations on vectors Adding 2 to a vector adds 2 to each element of the vector: a &lt;- 1:5 a + 2 ## [1] 3 4 5 6 7 Same goes for subtractions, multiplications and divisions… Multiplying a vector by another vector of equal length a &lt;- c(2, 4, 6) b &lt;- c(2, 3, 0) a * b ## [1] 4 12 0 Multiplying a vector by another shorter vector a &lt;- c(2, 4, 6, 3, 1) b &lt;- c(2, 3, 0) a * b ## Warning in a * b: longer object length is not a multiple of shorter object ## length ## [1] 4 12 0 6 3 Vector a is “recycled” ! Summary statistics Function Description mean(x) mean / average median(x) median min(x) minimum max(x) maximum var(x) variance summary(x) mean, median, min, max, quartiles a &lt;- c(1, 3, 12, 45, 3, 2) summary(a) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 2.25 3.00 11.00 9.75 45.00 9.1.4.2 Comparing vectors The %in% operator Which elements of a are also found in **b* ? a &lt;- 2:6 b &lt;- 4:10 a %in% b ## [1] FALSE FALSE TRUE TRUE TRUE Retrieve actual elements of a that are found in b: a &lt;- 2:6 b &lt;- 4:10 a[a %in% b] ## [1] 4 5 6 9.1.5 Character vector manipulation Character vectors are manipulated similarly to numeric ones. The %in% operator: k &lt;- c(&quot;mRNA&quot;, &quot;miRNA&quot;, &quot;snoRNA&quot;, &quot;RNA&quot;, &quot;lincRNA&quot;) p &lt;- c(&quot;mRNA&quot;,&quot;lincRNA&quot;, &quot;tRNA&quot;, &quot;miRNA&quot;) k %in% p ## [1] TRUE TRUE FALSE FALSE TRUE k[k %in% p] ## [1] &quot;mRNA&quot; &quot;miRNA&quot; &quot;lincRNA&quot; Select elements from vector m that are not exon m &lt;- c(&quot;exon&quot;, &quot;intron&quot;, &quot;exon&quot;) m != &quot;exon&quot; ## [1] FALSE TRUE FALSE m[m != &quot;exon&quot;] ## [1] &quot;intron&quot; "],
["exercise-2-numeric-vector-manipulation.html", "9.2 Exercise 2. Numeric vector manipulation", " 9.2 Exercise 2. Numeric vector manipulation 9.2.1 Exercise 2a. Create the script “exercise2.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 2 in that script. Remember you can comment the code using #. 1- Go to Rcourse/Module1 First check where you currently are with getwd(); then go to Rcourse/Module1 with setwd() correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 2- Create a numeric vector y which contains the numbers from 2 to 11, both included. Show y in the terminal. correction y &lt;- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11) # same as y &lt;- 2:11 # show in terminal: y ## [1] 2 3 4 5 6 7 8 9 10 11 3- How many elements are in y? I.e what is the length of vector y ? correction length(y) ## [1] 10 4- Show the 2nd element of y. correction y[2] ## [1] 3 5- Show the 3rd and the 6th elements of y. correction y[c(3,6)] ## [1] 4 7 6- Remove the 4th element of y: reassign. What is now the length of y ? correction # remove 4th element and reassign y &lt;- y[-4] # length of y length(y) ## [1] 9 7- Show all elements of y that are less than 7. correction # which elements of y are less than 7: y &lt; 7 ## [1] TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE # show those elements y[ y &lt; 7 ] ## [1] 2 3 4 6 8- Show all elements of y that are greater or equal to 4 and less than 9. correction y[ y &gt;= 4 &amp; y &lt; 9 ] ## [1] 4 6 7 8 9- Create the vector x of 1000 random numbers from the normal distribution: First read the help page of the rnorm() function. correction # help page for the rnorm function help(rnorm) # produce a vector of 1000 random numbers from the normal distribution x &lt;- rnorm(1000) 10. What are the mean, median, minimum and maximum values of x? correction mean(x); median(x); min(x); max(x) ## [1] -0.01871379 ## [1] -0.02276918 ## [1] -3.412708 ## [1] 3.348919 11- Run the summary() function on x. What additional information do you obtain ? correction summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -3.41271 -0.63370 -0.02277 -0.01871 0.63355 3.34892 12- Create vector y2 as: y2 &lt;- c(1, 11, 5, 62, 18, 2, 8) 13. What is the sum of all elements in y2 ? correction sum(y2) ## [1] 107 14- Which elements of y2 are also present in y ? Note: remember the %in% operator. correction y2[ y2 %in% y ] ## [1] 11 2 8 15- Multiply each element of y2 by 1.5: reassign. correction y2 &lt;- y2 * 1.5 16- Use the function any() to check if the number 3 is present. correction # &quot;Given a set of logical vectors, is at least one of the values true?&quot; any( y2 == 3 ) ## [1] TRUE 9.2.2 Exercise 2b. 1- Create the vector myvector as: myvector &lt;- c(1, 2, 3, 1, 2, 3, 1, 2, 3) Create the same vector using the rep() function (?rep) correction myvector &lt;- rep(1:3, 3) 2- Reassign the 5th, 6th and 7th position of myvector with the values 8, 12 and 32, respectively. correction # reassign one by one myvector[5] &lt;- 8 myvector[6] &lt;- 12 myvector[7] &lt;- 32 # or reassign all at once myvector[5:7] &lt;- c(8, 12, 32) 3- Calculate the fraction/percentage of each element of myvector (relative to the sum of all elements of the vector). sum() can be useful. correction # sum of all elements of the vector mytotal &lt;- sum(myvector) # divide each element by the sum myvector / mytotal ## [1] 0.015625 0.031250 0.046875 0.015625 0.125000 0.187500 0.500000 0.031250 ## [9] 0.046875 # multiply by 100 to get a percentage (myvector / mytotal) * 100 ## [1] 1.5625 3.1250 4.6875 1.5625 12.5000 18.7500 50.0000 3.1250 4.6875 4- Add vector c(2, 4, 6, 7) to myvector (combining both vectors): reassign! correction # create the new vector newvector &lt;- c(2, 4, 6, 7) # combine both myvector and newvector c(myvector, newvector) ## [1] 1 2 3 1 8 12 32 2 3 2 4 6 7 # reassign myvector myvector &lt;- c(myvector, newvector) "],
["exercise-3-character-vector-manipulation.html", "9.3 Exercise 3. Character vector manipulation", " 9.3 Exercise 3. Character vector manipulation 9.3.1 Exercise 3a. Create the script “exercise3.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 3 in that script. Remember you can comment the code using #. 1- Go to Rcourse/Module1 First check where you currently are with getwd(); then go to Rcourse/Module1 with setwd() correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 2- Create vector w as: w &lt;- rep(x=c(&quot;miRNA&quot;, &quot;mRNA&quot;), times=c(3, 2)) 3- View vector w in the console: how does function rep() work ? Play with the times argument. correction rep(x=c(&quot;miRNA&quot;, &quot;mRNA&quot;), times=c(3, 4)) ## [1] &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; rep(x=c(&quot;miRNA&quot;, &quot;mRNA&quot;), times=c(10, 2)) ## [1] &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; ## [9] &quot;miRNA&quot; &quot;miRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; 4- What is the output of table(w) ? What does the table function do ? 5- Type w[grep(pattern=“mRNA”, x=w)] and w[w == “mRNA”] Is there a difference between the two outputs? correction w[grep(pattern=&quot;mRNA&quot;, w)] ## [1] &quot;mRNA&quot; &quot;mRNA&quot; w[w == &quot;mRNA&quot;] ## [1] &quot;mRNA&quot; &quot;mRNA&quot; # no difference between the outputs 6- Now type w[grep(pattern=“RNA”, w)] and w[w == “RNA”] Is there a difference between the two outputs? correction w[grep(pattern=&quot;RNA&quot;, w)] ## [1] &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; w[w == &quot;RNA&quot;] ## character(0) # grep outputs 5 values but == outputs none What is the difference between == and grep ? correction = looks for exact matches. grep looks for patterns. 7- Create vector g as: g &lt;- c(&quot;hsa-let-7a&quot;, &quot;hsa-mir-1&quot;, &quot;CLC&quot;, &quot;DKK1&quot;, &quot;LPA&quot;) How many elements do w and g contain? correction length(w); length(g) ## [1] 5 ## [1] 5 8- Do vectors w and g have the same length? Use the function identical() to check this. correction identical(x=length(w), y=length(g)) ## [1] TRUE 9- Name the elements of g using the elements of w. (i.e. the names of each element of g will be the elements of w). correction names(g) &lt;- w If you have time, continue with Exercise 3b below. 9.3.2 Exercise 3b. 1- Use the sub() function to replace miRNA with microRNA in the names of g. correction names(g) &lt;- sub(pattern=&quot;miRNA&quot;, replacement=&quot;microRNA&quot;, x=names(g)) 2- Count how many microRNAs and mRNAs there are in g based on the column names. correction table(names(g)) ## ## microRNA mRNA ## 3 2 3- Create vector tt as: tt &lt;- &quot;Introduction to R course&quot; How many characters does tt contain? Use nchar(). correction nchar(tt) ## [1] 24 4- Remove “Introduction to R” from tt. You can try with either substr() or gsub() correction substr(x=tt, start=17, stop=nchar(tt)) ## [1] &quot;R course&quot; gsub(pattern=&quot;Introduction to R&quot;, replacement=&quot;&quot;, x=tt) ## [1] &quot; course&quot; "],
["factors.html", "9.4 Factors", " 9.4 Factors A factor is a vector object (1 dimension) used to specify a discrete classification (grouping) of the components of other vectors. Factors are mainly used for statistical modeling, and can also be useful for graphing. You can create factors with the factor function, for example: e &lt;- factor(c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;)) # check the structure of e str(e) ## Factor w/ 3 levels &quot;high&quot;,&quot;low&quot;,&quot;medium&quot;: 1 2 3 2 Example of a character vector versus a factor # factor e &lt;- factor(c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;)) # character vector e2 &lt;- c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;) # Check the structure of both objects str(e) ## Factor w/ 3 levels &quot;high&quot;,&quot;low&quot;,&quot;medium&quot;: 1 2 3 2 str(e2) ## chr [1:4] &quot;high&quot; &quot;low&quot; &quot;medium&quot; &quot;low&quot; Groups in factors are called levels. Levels can be ordered. Then, some operations applied on numeric vectors can be used: # unordered factor: e &lt;- factor(c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;)) max(e) # throws an error # ordered factor e_ord &lt;- factor(e, levels=c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;), ordered=TRUE) max(e_ord) # outputs &quot;high&quot; "],
["matrices.html", "9.5 Matrices", " 9.5 Matrices A matrix is a 2 dimensional vector. All columns in a matrix must have: the same type (numeric, character or logical) the same length 9.5.1 Creating a matrix From vectors with the rbind function: x &lt;- c(1, 44) y &lt;- c(0, 12) z &lt;- c(34, 4) # rbind: bind rows b &lt;- rbind(x, y, z) From vectors with the cbind function: i &lt;- c(1, 0, 34) j &lt;- c(44, 12, 4) # cbind: bind columns b &lt;- cbind(i, j) From scratch with the matrix function: # nrow: number of rows # ncol: number of columns b &lt;- matrix(c(1, 0, 34, 44, 12, 4), nrow=3, ncol=2) 9.5.2 Two-dimensional object Vectors have one index per element (1-dimension). Matrices have two indices (2-dimensions) per element, corresponding to the row and the column: Fetching elements of a matrix: The “coordinates” of an element in a 2-dimensional object will be first the row (on the left of the comma), then the column (on the right of the comma): 9.5.3 Matrix manipulation Add 1 to all elements of a matrix b &lt;- b + 1 Multiply by 3 all elements of a matrix b &lt;- b * 3 Subtract 2 to each element of the first row of a matrix b[1, ] &lt;- b[1, ] - 2 Replace elements that comply a condition: # Replace all elements that are greater than 3 with NA b[ b&gt;3 ] &lt;- NA "],
["data-frames.html", "9.6 Data frames", " 9.6 Data frames A data frame is a 2-dimensional structure. It is more general than a matrix. All columns in a data frame: + can be of different types (numeric, character or logical) + must have the same length 9.6.1 Create a data frame With the data.frame function: # stringsAsFactors: ensures that characters are treated as characters and not as factors d &lt;- data.frame(c(&quot;Maria&quot;, &quot;Juan&quot;, &quot;Alba&quot;), c(23, 25, 31), c(TRUE, TRUE, FALSE), stringsAsFactors = FALSE) Example why “stringsAsFactors = FALSE” is useful # Create a data frame with default parameters df &lt;- data.frame(label=rep(&quot;test&quot;,5), column2=1:5) # Replace one value df[2,1] &lt;- &quot;yes&quot; ## Warning in `[&lt;-.factor`(`*tmp*`, iseq, value = &quot;yes&quot;): invalid factor ## level, NA generated # Throws an error and doesn&#39;t replace the value ! # Create a data frame with df2 &lt;- data.frame(label=rep(&quot;test&quot;,5), column2=1:5, stringsAsFactors = FALSE) # Replace one value df2[2,1] &lt;- &quot;yes&quot; # Works! Converting a matrix into a data frame: # create a matrix b &lt;- matrix(c(1, 0, 34, 44, 12, 4), nrow=3, ncol=2) # convert as data frame b_df &lt;- as.data.frame(b) 9.6.2 Data frame manipulation: Very similar to matrix manipulation. "],
["two-dimensional-structures-manipulation.html", "9.7 Two-dimensional structures manipulation", " 9.7 Two-dimensional structures manipulation 9.7.1 Dimensions Get the number of rows and the number of columns: # Create a data frame d &lt;- data.frame(c(&quot;Maria&quot;, &quot;Juan&quot;, &quot;Alba&quot;), c(23, 25, 31), c(TRUE, TRUE, FALSE), stringsAsFactors = FALSE) # number of rows nrow(d) ## [1] 3 # number of columns ncol(d) ## [1] 3 Check the dimensions of the object: both number of rows and number of columns: # first element: number of rows # second element: number of columns dim(d) ## [1] 3 3 Dimension names Column and/or row names can be added to matrices and data frames colnames(d) &lt;- c(&quot;Name&quot;, &quot;Age&quot;, &quot;Vegetarian&quot;) rownames(d) &lt;- c(&quot;Patient1&quot;, &quot;Patient2&quot;, &quot;Patient3&quot;) Column and/or row names can be used to retrieve elements or sets of elements from a 2-dimensional object: d[,&quot;Name&quot;] ## [1] &quot;Maria&quot; &quot;Juan&quot; &quot;Alba&quot; # same as: d[,1] ## [1] &quot;Maria&quot; &quot;Juan&quot; &quot;Alba&quot; d[&quot;Patient3&quot;, &quot;Age&quot;] ## [1] 31 # same as: d[3,2] ## [1] 31 # for data frames only, the $ sign can be used to retrieve columns: # d$Name is d[,1] is d[, &quot;Name&quot;] Include names as you create objects: Matrix: m &lt;- matrix(1:4, ncol=2, dimnames=list(c(&quot;row1&quot;, &quot;row2&quot;), c(&quot;col1&quot;, &quot;col2&quot;))) + Data frame: df &lt;- data.frame(col1=1:2, col2=1:2, row.names=c(&quot;row1&quot;, &quot;row2&quot;)) 9.7.2 Manipulation Same principle as vectors… but in 2 dimensions! Examples select the columns of b if at least one element in the 3rd row is less than or equal to 4: # create b b &lt;- matrix(c(1, 0, 34, 44, 12, 4), nrow=3, ncol=2) # third row of b: b[3, ] ## [1] 34 4 # element(s) in the third row of b that is (are) less than or equal to 4 b[3, ] &lt;= 4 ## [1] FALSE TRUE # retrieve the corresponding sub-matrix b[ ,b[3, ] &lt;= 4] ## [1] 44 12 4 Select rows of b if at least one element in column 2 is greater than 24: # build data frame d d &lt;- data.frame(Name=c(&quot;Maria&quot;, &quot;Juan&quot;, &quot;Alba&quot;), Age=c(23, 25, 31), Vegetarian=c(TRUE, TRUE, FALSE), stringsAsFactors = FALSE) rownames(d) &lt;- c(&quot;Patient1&quot;, &quot;Patient2&quot;, &quot;Patient3&quot;) # The following commands all output the same result: d[d[,2] &gt; 24, ] ## Name Age Vegetarian ## Patient2 Juan 25 TRUE ## Patient3 Alba 31 FALSE d[d[,&quot;Age&quot;] &gt; 24, ] ## Name Age Vegetarian ## Patient2 Juan 25 TRUE ## Patient3 Alba 31 FALSE d[d$Age &gt; 24, ] ## Name Age Vegetarian ## Patient2 Juan 25 TRUE ## Patient3 Alba 31 FALSE Select patients (rows) based on 2 criteria: age of the patient (column 2) should be great than or equal to 25, and the patient should be vegetarian (column 3): d[ d$Age &gt;= 25 &amp; d$Vegetarian == TRUE, ] ## Name Age Vegetarian ## Patient2 Juan 25 TRUE More useful commands Add a row or a column with rbind and cbind, respectively # add a column cbind(d, 1:3) ## Name Age Vegetarian 1:3 ## Patient1 Maria 23 TRUE 1 ## Patient2 Juan 25 TRUE 2 ## Patient3 Alba 31 FALSE 3 # add a row rbind(d, 4:6) ## Name Age Vegetarian ## Patient1 Maria 23 1 ## Patient2 Juan 25 1 ## Patient3 Alba 31 0 ## 4 4 5 6 Add a patient to our data frame d: d &lt;- rbind(d, c(&quot;Jordi&quot;, 33, FALSE)) Process the sum of all rows or all columns with rowSums and colSums, respectively. # create a matrix b &lt;- matrix(1:20, ncol=4) # process sum of rows and sum of cols rowSums(b) ## [1] 34 38 42 46 50 colSums(b) ## [1] 15 40 65 90 The apply function Powerful tool to apply a command to all rows or all columns of a data frame or a matrix. For example, instead of calculating the sum of each row, you might be interested in calculating the median ? But rowMedians doesn’t exist ! apply takes 3 arguments: - first argument X: 2-dimensional object - second argument MARGIN: apply by row or by column? + 1: by row + 2: by column - third argument FUN: function to apply to either rows or columns # median value of each row of b apply(X=b, MARGIN=1, FUN=median) ## [1] 8.5 9.5 10.5 11.5 12.5 # median value of each column of b apply(X=b, MARGIN=2, FUN=median) ## [1] 3 8 13 18 "],
["exercise-4-matrix-manipulation.html", "9.8 Exercise 4. Matrix manipulation", " 9.8 Exercise 4. Matrix manipulation Create the script “exercise4.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 4 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 1- Create three numeric vectors x, y, z, each of 4 elements of your choice. correction x &lt;- 2:5 y &lt;- 6:9 z &lt;- 7:4 Use rbind() to create a matrix mat (3 rows and 4 columns) out of x, y and z. correction mat &lt;- rbind(x, y, z) 2- Create the same matrix now using the matrix function. correction mat &lt;- matrix(data=c(x, y, z), nrow=3, ncol=4) # Try with the &quot;byrow=TRUE&quot; parameter: what is different ? mat &lt;- matrix(data=c(x, y, z), nrow=3, ncol=4, byrow=TRUE) 3- Add names to mat’s columns: “a”, “b”, “c”, “d”, respectively. correction colnames(mat) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) 4- Calculate the sum of each row, and the sum of each column correction rowSums(mat); colSums(mat) ## [1] 14 30 22 ## a b c d ## 15 16 17 18 5- Create the matrix mat2 as: mat2 &lt;- matrix(c(seq(from=1, to=10, by=2), 5:1, rep(x=2017, times=5)), ncol=3) What does function seq() do? correction seq generate sequences of numbers. Here, it creates a sequences from 1 to 10 with a step of 2 numbers. 6- What are the dimensions of mat2 (number of rows and number of columns)? correction # number of rows nrow(mat2) ## [1] 5 # number of columns ncol(mat2) ## [1] 3 # dimensions: number of rows, number of columns dim(mat2) ## [1] 5 3 7- Add column names to mat2: “day”, “month” and “year”, respectively. correction colnames(mat2) &lt;- c(&quot;day&quot;, &quot;month&quot;, &quot;year&quot;) 8- Add row names to mat2: letters “A” to “E” correction rownames(mat2) &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;) rownames(mat2) &lt;- LETTERS[1:5] 9- Shows row(s) of mat2 where the month column is greater than or equal to 3. correction # select column month mat2[, &quot;month&quot;] ## A B C D E ## 5 4 3 2 1 # element(s) of column month that is (are) greater than or equal to 3 mat2[,&quot;month&quot;] &gt;= 3 ## A B C D E ## TRUE TRUE TRUE FALSE FALSE # finally select row(s) where the month columns is greater than or equal to 3 mat2[mat2[,&quot;month&quot;] &gt;= 3,] ## day month year ## A 1 5 2017 ## B 3 4 2017 ## C 5 3 2017 10- Replace all elements of mat2 that are equal to 2017 with 2018. correction # which elements of mat2 that are exactly equal to 2017 mat2==2017 ## day month year ## A FALSE FALSE TRUE ## B FALSE FALSE TRUE ## C FALSE FALSE TRUE ## D FALSE FALSE TRUE ## E FALSE FALSE TRUE # retrieve actual elements mat2[mat2==2017] ## [1] 2017 2017 2017 2017 2017 # replace all 2017 with 2018 mat2[mat2==2017] &lt;- 2018 11- Multiply all elements of the 2nd column of mat2 by 7. Reassign mat2! correction # multiply all elements of the 2nd column of mat2 by 7 mat2[,2] * 7 ## A B C D E ## 35 28 21 14 7 # reassign mat2 with the new values of column 2 mat2[,2] &lt;- mat2[,2] * 7 12- Add the column named “time” to mat2, that contains values 8, 12, 11, 10, 8. Save in the new object mat3. correction mat3 &lt;- cbind(mat2, time=c(8, 12, 11, 10, 8)) 13- Replace all elements of mat3 that are less than 3 with NA. correction # which elements of mat3 that are less than 3 mat3 &lt; 3 ## day month year time ## A TRUE FALSE FALSE FALSE ## B FALSE FALSE FALSE FALSE ## C FALSE FALSE FALSE FALSE ## D FALSE FALSE FALSE FALSE ## E FALSE FALSE FALSE FALSE # actually elements of mat3 that are less than 3 mat3[mat3 &lt; 3] ## [1] 1 # reassign elements of mat3 that are less than 3 with NA mat3[mat3 &lt; 3] &lt;- NA 14- Remove rows from mat3 if a NA is present. Save in the new object mat4. correction mat4 &lt;- na.omit(mat3) 15- Retrieve the smaller value of each column of mat4. Try different approaches: Retrieve the minimum for each column one by one. correction min(mat4[,&quot;day&quot;]) ## [1] 3 min(mat4[,&quot;month&quot;]) ## [1] 7 min(mat4[,&quot;year&quot;]) ## [1] 2018 min(mat4[,&quot;time&quot;]) ## [1] 8 Retrieve the minimum of all columns simultaneously using the apply() function. correction # mat4: object # 2: by column # min: function to apply apply(mat4, 2, min) ## day month year time ## 3 7 2018 8 "],
["exercise-5-data-frame-manipulation.html", "9.9 Exercise 5. Data frame manipulation", " 9.9 Exercise 5. Data frame manipulation Create the script “exercise5.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 5 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 9.9.1 Exercise 5a 1- Create the following data frame: |43|181|M| |34|172|F| |22|189|M| |27|167|F| With Row names: John, Jessica, Steve, Rachel. And Column names: Age, Height, Sex. correction df &lt;- data.frame(Age=c(43, 34, 22, 27), Height=c(181, 172, 189, 167), Sex=c(&quot;M&quot;, &quot;F&quot;, &quot;M&quot;, &quot;F&quot;), row.names = c(&quot;John&quot;, &quot;Jessica&quot;, &quot;Steve&quot;, &quot;Rachel&quot;), stringsAsFactors=FALSE) 2- Check the structure of df with str(). correction str(df) 3- Calculate the average age and height in df Try different approaches: * Calculate the average for each column separately. correction mean(df$Age) mean(df$Height) Calculate the average of both columns simultaneously using the apply() function. correction # we have to remove the Sex column: we can calculate the average only with numbers apply(df[,-3], 2, mean) apply(df[,1:2], 2, mean) apply(df[,-grep(&quot;Sex&quot;, colnames(df))], 2, mean) 4- Add one row to df2: Georges who is 53 years old and 168 tall. correction # Georges= allows us to enter the row name at the same time as we add a row df &lt;- rbind(df, Georges=c(53, 168, &quot;M&quot;)) 5- Change the row names of df so the data becomes anonymous: Use Patient1, Patient2, etc. instead of actual names. correction rownames(df) &lt;- c(&quot;Patient1&quot;, &quot;Patient2&quot;, &quot;Patient3&quot;, &quot;Patient4&quot;, &quot;Patient5&quot;) # try also the paste function! rownames(df) &lt;- paste(&quot;Patient&quot;, 1:5, sep=&quot;&quot;) 6- Create the data frame df2 that is a subset of df which will contain only the female entries. correction # which elements are female (&quot;F&quot; in the &quot;Sex&quot; colum) df$Sex==&quot;F&quot; # retrieve rows that contain the female entries, and save in df2 df2 &lt;- df[df$Sex==&quot;F&quot;,] 7- Create the data frame df3 that is a subset of df which will contain only entries of males taller than 170. correction # which entries are males df$Sex==&quot;M&quot; # which entries are greater than 170 in column &quot;Height&quot; df$Sex==&quot;M&quot; &amp; df$Height &gt; 170 # retrieve rows that contain the males that are taller than 170, and save in df3 df3 &lt;- df[df$Sex==&quot;M&quot; &amp; df$Height &gt; 170,] 9.9.2 Exercise 5b 1. Create two data frames mydf1 and mydf2 as: mydf1: |1|14| |2|12| |3|15| |4|10| mydf2: |1|paul| |2|helen| |3|emily| |4|john| |5|mark| With column names: “id”, “age” for mydf1, and “id”, “name” for mydf2. correction mydf1 &lt;- data.frame(id=1:4, age=c(14,12,15,10)) mydf2 &lt;- data.frame(id=1:5, name=c(&quot;paul&quot;, &quot;helen&quot;, &quot;emily&quot;, &quot;john&quot;, &quot;mark&quot;)) 2- Merge mydf1 and mydf2 by their “id” column. Look for the help page of merge and/or Google it! correction # input 2 data frames # &quot;by&quot; columns indicate by which column you want to merge the data merge(x=mydf1, y=mydf2, by.x=&quot;id&quot;, by.y=&quot;id&quot;) mydf3 &lt;- merge(x=mydf1, y=mydf2, by=&quot;id&quot;) 3- Order mydf3 by decreasing age. Look for the help page of order. correction # order the age column (default is increasing order) order(mydf3$age) # order the age column by decreasing order order(mydf3$age, decreasing = TRUE) # order the whole data frame by the column age in decreasing order mydf3[order(mydf3$age, decreasing = TRUE), ] 9.9.3 Exercise 5c 1- Using the download.file function, download this file to your current directory. (Right click on “this file” -&gt; Copy link location to get the full path). correction # failing: download.file(&quot;https://github.com/sbcrg/CRG_RIntroduction/blob/master/genes_dataframe.RData&quot;, &quot;genes_dataframe.RData&quot;) download.file(&quot;https://public-docs.crg.es/biocore/sbonnin/Rcourse/genes_dataframe.RData&quot;, &quot;genes_dataframe.RData&quot;) 2- The function dir() lists the files and directories present in the current directory: check if genes_dataframe.RData was copied. correction dir() 3- Load genes_dataframe.RData in your environment Use the load function. correction load(&quot;genes_dataframe.RData&quot;) 4- genes_dataframe.RData contains the df_genes object: is it now present in your environment? correction ls() 5- Explore df_genes and see what it contains You can use a variety of functions: str, head, tail, dim, colnames, rownames, class… correction str(df_genes) head(df_genes) tail(df_genes) dim(df_genes) colnames(df_genes) rownames(df_genes) class(df_genes) 6- Select rows for which pvalue_KOvsWT &lt; 0.05 AND log2FoldChange_KOvsWT &gt; 0.5. Store in the up object. correction # rows where pvalue_KOvsWT &lt; 0.05 df_genes$pvalue_KOvsWT &lt; 0.05 # rows where log2FoldChange_KOvsWT &gt; 0.5 df_genes$log2FoldChange_KOvsWT &gt; 0.5 # rows that comply both of the above conditions df_genes$pvalue_KOvsWT &lt; 0.05 &amp; df_genes$log2FoldChange_KOvsWT &gt; 0.5 # select rows for which pvalue_KOvsWT &lt; 0.05 AND log2FoldChange_KOvsWT &gt; 0.5 up &lt;- df_genes[df_genes$pvalue_KOvsWT &lt; 0.05 &amp; df_genes$log2FoldChange_KOvsWT &gt; 0.5,] How many rows (genes) were selected? 7- Select from the up object the Zinc finger protein coding genes (i.e. the gene symbol starts with Zfp). Use the grep() function. correction # extract gene symbol column up$gene_symbol # use grep to get the genes matching the pattern &quot;Zfp&quot; up[grep(&quot;Zf&quot;, up$gene_symbol), ] 8- Select rows for which pvalue_KOvsWT &lt; 0.05 AND log2FoldChange_KOvsWT is &gt; 0.5 OR &lt; -0.5. For the selection of log2FoldChange: give the abs function a try! Store in the diff_genes object. correction # rows where pvalue_KOvsWT &lt; 0.05 df_genes$pvalue_KOvsWT &lt; 0.05 # rows where log2FoldChange_KOvsWT &gt; 0.5 df_genes$log2FoldChange_KOvsWT &gt; 0.5 # rows where log2FoldChange_KOvsWT &lt; -0.5 df_genes$log2FoldChange_KOvsWT &gt; -0.5 # rows where log2FoldChange_KOvsWT &lt; -0.5 OR log2FoldChange_KOvsWT &gt; 0.5 df_genes$log2FoldChange_KOvsWT &gt; 0.5 | df_genes$log2FoldChange_KOvsWT &gt; -0.5 # same as above but using the abs function abs(df_genes$log2FoldChange_KOvsWT) &gt; 0.5 # combine all required criteria df_genes$pvalue_KOvsWT &lt; 0.05 &amp; abs(df_genes$log2FoldChange_KOvsWT) &gt; 0.5 # extract corresponding entries diff_genes &lt;- df_genes[df_genes$pvalue_KOvsWT &lt; 0.05 &amp; abs(df_genes$log2FoldChange_KOvsWT) &gt; 0.5,] How many rows (genes) were selected? "],
["missing-values.html", "Part10 Missing values", " Part10 Missing values NA (Not Available) is a recognized element in R. Finding missing values in a vector # Create vector x &lt;- c(4, 2, 7, NA) # Find missing values in vector: is.na(x) # Remove missing values na.omit(x) x[ !is.na(x) ] Some functions can deal with NAs, either by default, or with specific arguments: x &lt;- c(4, 2, 7, NA) # default arguments mean(x) # set na.rm=TRUE mean(x, na.rm=TRUE) In a matrix or a data frame, keep only rows where there are no NA values: # Create matrix with some NA values mydata &lt;- matrix(c(1:10, NA, 12:2, NA, 15:20, NA), ncol=3) # Keep only rows without NAs mydata[complete.cases(mydata), ] # or na.omit(mydata) Check this R blogger post on missing/null values "],
["input-output.html", "Part11 Input / Output", " Part11 Input / Output We will learn how to: * Read in a file * Write out a file * Save a graph in a file (Module 3) "],
["on-vectors.html", "11.1 On vectors", " 11.1 On vectors Read a file as a vector with the scan function # Read in file scan(file=&quot;file.txt&quot;) # Save in object k &lt;- scan(file=&quot;file.txt&quot;) By default, scans “double” (numeric) elements: it fails if the input contains characters. If non-numeric, you need to specify the type of data contained in the file: # specify the type of data to scan scan(file=&quot;file.txt&quot;, what=&quot;character&quot;) scan(file=&quot;~/file.txt&quot;, what=&quot;character&quot;) Regarding paths of files: If the file is not in the current directory, you can provide a full or relative path. For example, if located in the home directory, read it as: scan(file=&quot;~/file.txt&quot;, what=&quot;character&quot;) Write the content of a vector in a file: # create a vector mygenes &lt;- c(&quot;SMAD4&quot;, &quot;DKK1&quot;, &quot;ASXL3&quot;, &quot;ERG&quot;, &quot;CKLF&quot;, &quot;TIAM1&quot;, &quot;VHL&quot;, &quot;BTD&quot;, &quot;EMP1&quot;, &quot;MALL&quot;, &quot;PAX3&quot;) # write in a file write(x=mygenes, file=&quot;gene_list.txt&quot;) Regarding paths of files: When you write a file, you can also specify a full or relative path: # Write to home directory write(x=mygenes, file=&quot;~/gene_list.txt&quot;) # Write to one directory up write(x=mygenes, file=&quot;../gene_list.txt&quot;) "],
["on-data-frames-or-matrices.html", "11.2 On data frames or matrices", " 11.2 On data frames or matrices Read in a file into a data frame with the read.table function: a &lt;- read.table(file=&quot;file.txt&quot;) You can convert it as a matrix, if needed, with: a &lt;- as.matrix(read.table(file=&quot;file.txt&quot;)) Useful arguments: Write a data frame or matrix to a file: write.table(x=a, file=&quot;file.txt&quot;) Useful arguments: Note that &quot; stands for tab-delimitation "],
["exercise-6-.html", "11.3 Exercise 6.", " 11.3 Exercise 6. Create the script “exercise6.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 6 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module2&quot;) setwd(&quot;~/Rcourse/Module2&quot;) 11.3.1 Exercise 6a. Input / output 1- Download folder “i_o_files” in your current directory with: # system invokes the OS command specified by the &quot;command&quot; argument. system(command=&quot;svn export https://github.com/sarahbonnin/CRG_RIntroduction/trunk/i_o_files&quot;) All files that will be used for exercise 6 are found in the i_o_files folder ! 2- Read in the content of ex6a_input.txt using the scan command; save in object z How many elements are in z? correction # scan content of the file z &lt;- scan(&quot;i_o_files/ex6a_input.txt&quot;) # number of elements (length of vector) length(z) 3- Sort z: save sorted vector in object “zsorted”. correction zsorted &lt;- sort(z) 4- Write zsorted content into file ex6a_output.txt. correction write(zsorted, &quot;ex6a_output.txt&quot;) 5- Check the file you produced in the RStudio file browser (click on the file in bottom-right panel “Files” tab). Save the content of zsorted again but this time setting the argument “ncolumns” to 1: how is the file different? correction write(zsorted, &quot;ex6a_output.txt&quot;, ncolumns=1) 11.3.2 Exercise 6b - I/O on data frame: play with the arguments of read.table 1- field separator Read ex6b_IO_commas_noheader.txt in object fs. What are the dimensions of fs? correction # read in file with default parameters fs &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_noheader.txt&quot;) dim(fs) Fields/columns are separated by commas: change the default value of the “sep” argument and read in the file again. What are now the dimensions of fs? correction # change field separator to &quot;,&quot; fs &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_noheader.txt&quot;, sep=&quot;,&quot;) dim(fs) 2- field separator + header Read ex6b_IO_commas_header.txt in object fs_c. What are the dimensions of fs_c ? correction fs_c &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_header.txt&quot;) dim(fs_c) Check head(fs_c) and change the default field separator to an appropriate one. correction fs_c &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_header.txt&quot;, sep=&quot;,&quot;) The first row should to be the header (column names): change the default value of the header parameter and read in the file again. What are now the dimensions of fs_c ? correction fs_c &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_header.txt&quot;, sep=&quot;,&quot;, header=TRUE) 3- skipping lines Read ex6b_IO_skip.txt in object sk. correction sk &lt;- read.table(&quot;i_o_files/ex6b_IO_skip.txt&quot;) Is R complaining ? Check “manually” the file (in the R Studio file browser). The skip argument allows you to ignore one or more line(s) before reading in a file. Introduce this argument with the appropriate number of lines to skip, and read the file again. correction sk &lt;- read.table(&quot;i_o_files/ex6b_IO_skip.txt&quot;, skip=2) dim(sk) Is R still complaining? What are now the dimensions of sk ? Change the default field separator. What are now the dimensions of sk ? correction sk &lt;- read.table(&quot;i_o_files/ex6b_IO_skip.txt&quot;, skip=2, sep=&quot;,&quot;, header=T) 4- Comment lines Read ex6b_IO_comment.txt in object cl. correction cl &lt;- read.table(&quot;i_o_files/ex6b_IO_comment.txt&quot;) Is R complaining again ? Check manually the file and try to find out what is wrong… What os the comment.char argument used for ? Adjust the comment.char argument and read the file again. correction cl &lt;- read.table(&quot;i_o_files/ex6b_IO_comment.txt&quot;, comment.char = &quot;*&quot;) Adjust also the header and sep arguments to read in the file correctly. What are now the dimensions of cl? correction cl &lt;- read.table(&quot;i_o_files/ex6b_IO_comment.txt&quot;, comment.char = &quot;*&quot;, sep=&quot;,&quot;, header=TRUE) dim(cl) 4- final Read ex6b_IO_final.txt in object fin. correction fin &lt;- read.table(&quot;i_o_files/ex6b_IO_final.txt&quot;) Adjust the appropriate parameters according to what you have learnt, in order to obtain the data frame “fin” of dimensions 167 x 4. correction fin &lt;- read.table(&quot;i_o_files/ex6b_IO_final.txt&quot;, sep=&quot;,&quot;, header=TRUE, skip=3, comment.char=&quot;&amp;&quot; ) 11.3.3 Exercice 6c - I/O on a data frame 1- Read in file ex6c_input.txt in ex6 object Warning: the file has a header ! Check the structure of ex6 (remember the str command). correction ex6 &lt;- read.table(&quot;i_o_files/ex6c_input.txt&quot;, header=TRUE) str(ex6) 2- Now read in the same file but, this time, set the argument as.is to TRUE. Check again the structure: what has changed ? correction ex6 &lt;- read.table(&quot;i_o_files/ex6c_input.txt&quot;, header=TRUE, as.is=TRUE) str(ex6) 3- What are the column names of ex6 ? correction colnames(ex6) 4- Change the name of the first column of ex6 from “State” to “Country”. correction # extract all column names of ex6 colnames(ex6) # extract the name of the first column only colnames(ex6)[1] # reassign name of the first column only colnames(ex6)[1] &lt;- &quot;Country&quot; 5- How many countries are in the Eurozone, according to ex6 ? Remember the table function. correction table(ex6$Eurozone) 6- In the Eurozone column: change “TRUE” with “yes” and “FALSE” with “no”. correction # select the Eurozone column ex6$Eurozone # elements of the Eurozone column that are exactly TRUE ex6$Eurozone==TRUE # extract actual values that are TRUE ex6$Eurozone[ex6$Eurozone==TRUE] # reassign all elements that are TRUE with &quot;yes&quot; ex6$Eurozone[ex6$Eurozone==TRUE] &lt;- &quot;yes&quot; # same with FALSE ex6$Eurozone[ex6$Eurozone==FALSE] &lt;- &quot;no&quot; 7- In the column Country: how many country names from the list contain the letter “c” (capital- or lower-case) ? Remember the grep function. Check the help page. correction # country names with &quot;c&quot; (lower-case) grep(&quot;c&quot;, ex6$Country) # country names with &quot;c&quot; or &quot;C&quot; (ignoring case) grep(&quot;c&quot;, ex6$Country, ignore.case = TRUE) # show actual country names grep(&quot;c&quot;, ex6$Country, value=TRUE, ignore.case = TRUE) 8- According to that data frame: how many people live: + in the European union (whole table) ? + in the Eurozone ? correction # sum the whole population column sum(ex6$Population) # select elements of ex6 where Eurozone is &quot;yes&quot; ex6$Eurozone == &quot;yes&quot; # select only elements in Population for which the corresponding Eurozone elements are &quot;yes&quot; ex6$Population[ex6$Eurozone == &quot;yes&quot;] # sum that selection sum(ex6$Population[ex6$Eurozone == &quot;yes&quot;]) 9- Write ex6 into file ex6c_output.txt After each of the following steps, check the output file in the RStudio file browser (lower-right panel). Try with the default arguments. correction write.table(ex6, file=&quot;ex6c_output.txt&quot;) Add the argument “row.names” set to FALSE. correction write.table(ex6, file=&quot;ex6c_output.txt&quot;, row.names = FALSE) Add the argument “quote” set to FALSE. correction write.table(ex6, file=&quot;ex6c_output.txt&quot;, row.names = FALSE, quote = FALSE) Add the argument “sep” set to “ or to”,&quot; correction write.table(ex6, file=&quot;ex6c_output.txt&quot;, row.names = FALSE, quote = FALSE, sep=&quot;\\t&quot;) correction write.table(ex6, file=&quot;ex6c_output.txt&quot;, row.names = FALSE, quote = FALSE, sep=&quot;,&quot;) "],
["library-and-packages.html", "Part12 Library and packages", " Part12 Library and packages Packages are collections of R functions, data, and compiled code in a well-defined format. The directory where packages are stored is called the library. Source of definitions: http://www.statmethods.net/interface/packages.html "],
["r-base.html", "12.1 R base", " 12.1 R base A set a standard packages which are supplied with R by default. Example: package base (write, table, rownames functions), package utils (read.table, str functions), package stats (var, na.omit, median functions). "],
["r-contrib.html", "12.2 R contrib", " 12.2 R contrib All other packages: CRAN: Comprehensive R Archive Network 13735* packages available find packages in https://cran.r-project.org/web/packages/ Bioconductor: 1649* packages available find packages in https://bioconductor.org/packages As of February 2019* Bioconductor Set of R packages specialized in the analysis of bioinformatics data. Bioconductor supports most types of genomics and NGS data (e.g. limma, DESeq2, BayesPeak) and integrates: * Specific data classes (e.g. Granges from GenomicRanges) * Integrates command line tools (e.g Rsamtools) * Annotation tools (e.g. biomaRt) There are different types of Bioconductor packages: * Software: set of functions + e.g. DESeq2 (NGS data analysis) * Annotation: annotation of specific arrays, organisms, events, etc. + e.g. BSgenome.Hsapiens.UCSC.hg38 * Experiment: data that can be loaded and used + e.g. ALL (acute lymphoblastic leukemia dataset) "],
["install-a-package.html", "12.3 Install a package", " 12.3 Install a package With RStudio: From the console: install.packages(pkgs=&quot;ggplot2&quot;) Install a bioconductor package: For R version &gt;= 3.5.0 # Install Bioconductor package manager install.packages(pkgs=&quot;BiocManager&quot;) # Install Bioconductor package BiocManager::install(&quot;DESeq2&quot;) + For older R versions # Source (load into environment) script containing biocLite function source(&quot;http://www.bioconductor.org/biocLite.R&quot;) # Use biocLite function to install Bioconductor package biocLite(&quot;DESeq2&quot;) "],
["load-a-package.html", "12.4 Load a package", " 12.4 Load a package With RStudio: From the console: library(&quot;ggplot2&quot;) "],
["check-what-packages-are-currently-loaded.html", "12.5 Check what packages are currently loaded", " 12.5 Check what packages are currently loaded sessionInfo() ## R version 3.5.2 (2018-12-20) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 19.04 ## ## Matrix products: default ## BLAS: /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.8.0 ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.8.0 ## ## locale: ## [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## [3] LC_TIME=es_ES.UTF-8 LC_COLLATE=en_US.UTF-8 ## [5] LC_MONETARY=es_ES.UTF-8 LC_MESSAGES=en_US.UTF-8 ## [7] LC_PAPER=es_ES.UTF-8 LC_NAME=C ## [9] LC_ADDRESS=C LC_TELEPHONE=C ## [11] LC_MEASUREMENT=es_ES.UTF-8 LC_IDENTIFICATION=C ## ## attached base packages: ## [1] grid parallel stats4 stats graphics grDevices utils ## [8] datasets methods base ## ## other attached packages: ## [1] car_3.0-3 carData_3.0-2 ## [3] ggrepel_0.8.1 gridExtra_2.3 ## [5] reshape2_1.4.3 VennDiagram_1.6.20 ## [7] futile.logger_1.4.3 gplots_3.0.1.1 ## [9] HDF5Array_1.10.1 rhdf5_2.26.2 ## [11] BiocManager_1.30.4 bookdown_0.13 ## [13] shinydashboard_0.7.1 shinyBS_0.61 ## [15] data.table_1.12.2 DT_0.8 ## [17] shinyWidgets_0.4.8 shinyjs_1.0 ## [19] colourpicker_1.0 SummarizedExperiment_1.12.0 ## [21] DelayedArray_0.8.0 BiocParallel_1.16.6 ## [23] matrixStats_0.54.0 Biobase_2.42.0 ## [25] GenomicRanges_1.34.0 GenomeInfoDb_1.18.2 ## [27] IRanges_2.16.0 S4Vectors_0.20.1 ## [29] BiocGenerics_0.28.0 shiny_1.3.2 ## [31] heatmaply_0.16.0 viridis_0.5.1 ## [33] viridisLite_0.3.0 plotly_4.9.0 ## [35] ggplot2_3.2.1 ## ## loaded via a namespace (and not attached): ## [1] colorspace_1.4-1 rio_0.5.16 XVector_0.22.0 ## [4] rstudioapi_0.10 codetools_0.2-16 knitr_1.24 ## [7] zeallot_0.1.0 jsonlite_1.6 cluster_2.0.7-1 ## [10] compiler_3.5.2 httr_1.4.1 backports_1.1.4 ## [13] assertthat_0.2.1 Matrix_1.2-15 lazyeval_0.2.2 ## [16] later_0.8.0 formatR_1.7 htmltools_0.3.6 ## [19] tools_3.5.2 gtable_0.3.0 glue_1.3.1 ## [22] GenomeInfoDbData_1.2.0 dplyr_0.8.3 Rcpp_1.0.2 ## [25] cellranger_1.1.0 vctrs_0.2.0 gdata_2.18.0 ## [28] iterators_1.0.12 crosstalk_1.0.0 xfun_0.9 ## [31] stringr_1.4.0 openxlsx_4.1.0.1 mime_0.7 ## [34] miniUI_0.1.1.1 gtools_3.8.1 dendextend_1.12.0 ## [37] zlibbioc_1.28.0 MASS_7.3-51.1 scales_1.0.0 ## [40] TSP_1.1-7 hms_0.5.1 promises_1.0.1 ## [43] lambda.r_1.2.3 RColorBrewer_1.1-2 yaml_2.2.0 ## [46] curl_4.0 stringi_1.4.3 gclus_1.3.2 ## [49] foreach_1.4.7 seriation_1.2-8 caTools_1.17.1.2 ## [52] zip_2.0.3 rlang_0.4.0 pkgconfig_2.0.2 ## [55] bitops_1.0-6 evaluate_0.14 lattice_0.20-38 ## [58] purrr_0.3.2 Rhdf5lib_1.4.3 htmlwidgets_1.3 ## [61] labeling_0.3 tidyselect_0.2.5 plyr_1.8.4 ## [64] magrittr_1.5 R6_2.4.0 pillar_1.4.2 ## [67] haven_2.1.1 foreign_0.8-71 withr_2.1.2 ## [70] abind_1.4-5 RCurl_1.95-4.12 tibble_2.1.3 ## [73] crayon_1.3.4 futile.options_1.0.1 KernSmooth_2.23-15 ## [76] rmarkdown_1.15 readxl_1.3.1 forcats_0.4.0 ## [79] digest_0.6.20 webshot_0.5.1 xtable_1.8-4 ## [82] tidyr_0.8.3 httpuv_1.5.1 munsell_0.5.0 ## [85] registry_0.5-1 "],
["list-functions-from-a-package.html", "12.6 List functions from a package", " 12.6 List functions from a package With RStudio From the console ls(&quot;package:ggplot2&quot;) "],
["rstudio-server-at-crg.html", "12.7 RStudio server at CRG", " 12.7 RStudio server at CRG If you can’t install packages (permission issues), you first need to specify a writeable directory to install the packages into. Follow the steps below: # Go to your home directory setwd(&quot;~&quot;) # Create a directory where to store the packages dir.create(&quot;R_packages&quot;) # Add directory location to the library path .libPaths(&quot;~/R_packages/&quot;) "],
["exercise-7-library-and-packages.html", "12.8 Exercise 7: Library and packages", " 12.8 Exercise 7: Library and packages Create the script “exercise7.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 7 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module2&quot;) setwd(&quot;~/Rcourse/Module2&quot;) 1- Install and load the packages ggplot2 and WriteXLS correction # Install the 2 packages at once install.packages(pkgs=c(&quot;ggplot2&quot;, &quot;WriteXLS&quot;)) # Load in the environment (one by one) library(&quot;ggplot2&quot;) library(&quot;WriteXLS&quot;) Check with sessionInfo() that the packages were loaded. 2- ggplot2 loads automatically the diamonds dataset in the working environment: you can use it as an object after ggplot2 is loaded. What are the dimensions of diamonds? What are the column names of diamond? correction # Dimensions of diamonds dim(diamonds) # Column names of diamonds colnames(diamonds) You can read the help page of the diamonds dataset to understand what it contains! Note: diamonds is a data frame: you can test it with is.data.frame(diamonds) (returns TRUE). 3- Select the columns carat, cut, color and price of diamonds and store in the object diams1. correction # Select columns diams1 &lt;- diamonds[,c(&quot;carat&quot;, &quot;cut&quot;, &quot;color&quot;, &quot;price&quot;)] 4- Install and load the package dplyr from the Console. correction # Install package install.packages(pkgs=&quot;dplyr&quot;) # Load package library(&quot;dplyr&quot;) 5- Use the function “sample_n” from the dplyr package to randomly sample 200 lines of diams1: save in diams object. correction # Subset data frame diams &lt;- sample_n(tbl=diams1, size=200) -6.Save diams into 2 files: diamonds200.txt with write.table diamonds200.xls with WriteXLS Note: read about and play with the different options of both functions and check the output files. correction # Write a text file with write.table write.table(x=diams, file=&quot;diamonds200.txt&quot;, row.names=FALSE, quote=FALSE, sep=&quot;\\t&quot;) # Write an Excel file with WriteXLS WriteXLS(x=diams, ExcelFileName=&quot;diamonds200.xls&quot;, row.names=FALSE, col.names=TRUE, FreezeRow=1, BoldHeaderRow=TRUE) "],
["regular-expressions.html", "Part13 Regular expressions", " Part13 Regular expressions Regular expressions are tools to describe patterns in strings. "],
["find-simple-matches-with-grep.html", "13.1 Find simple matches with grep", " 13.1 Find simple matches with grep Find a pattern anywhere in the string (outputs the index of the element): # By default, outputs the index of the element matching the pattern grep(pattern=&quot;Gen&quot;, x=&quot;Genomics&quot;) ## [1] 1 Show actual element where the pattern is found (instead of the index only) with value=TRUE: # Set value=TRUE grep(pattern=&quot;Gen&quot;, x=&quot;Genomics&quot;, value=TRUE) ## [1] &quot;Genomics&quot; Non case-sensitive search with ignore.case=TRUE: # Enter the pattern in lower-case, but case is ignored grep(pattern=&quot;gen&quot;, x=&quot;Genomics&quot;, value=TRUE, ignore.case=TRUE) ## [1] &quot;Genomics&quot; Show if it DOESN’T match the pattern with inv=TRUE: # Shows what doesn&#39;t match grep(pattern=&quot;gen&quot;, x=&quot;Genomics&quot;, value=TRUE, ignore.case=TRUE, inv=TRUE) ## character(0) "],
["regular-expressions-to-find-more-flexible-patterns.html", "13.2 Regular expressions to find more flexible patterns", " 13.2 Regular expressions to find more flexible patterns Special characters used for pattern recognition: $ | Find pattern at the end of the string | ^ | Find pattern at the beginning of the string | {n} | The previous pattern should be found exactly n times | {n,m} | The previous pattern should be found between n and m times| + | The previous pattern should be found at least 1 time | * | One or more allowed, but optional | ? | One allowed, but optional | Match your own pattern inside [] \\[abc\\]: matches a, b, or c. ^\\[abc\\]: matches a, b or c at the beginning of the element. ^A\\[abc\\]+: matches A as the first character of the element, then either a, b or c ^A\\[abc\\]*: matches A as the first character of the element, then optionally either a, b or c ^A\\[abc\\]{1}_: matches A as the first character of the element, then either a, b or c (one time!) followed by an underscore \\[a-z\\]: matches every character between a and z. \\[A-Z\\]: matches every character between A and Z. \\[0-9\\]: matches every number between 0 and 9. Match anything contained between brackets (here either g or t) at least once: grep(pattern=&quot;[gt]+&quot;, x=c(&quot;genomics&quot;, &quot;proteomics&quot;, &quot;transcriptomics&quot;), value=TRUE) ## [1] &quot;genomics&quot; &quot;proteomics&quot; &quot;transcriptomics&quot; Match anything contained between brackets at least once AND at the start of the element: grep(pattern=&quot;^[gt]+&quot;, x=c(&quot;genomics&quot;, &quot;proteomics&quot;, &quot;transcriptomics&quot;), value=TRUE) ## [1] &quot;genomics&quot; &quot;transcriptomics&quot; Create a vector of email addresses: vec_ad &lt;- c(&quot;marie.curie@yahoo.es&quot;, &quot;albert.einstein01@hotmail.com&quot;, &quot;charles.darwin1809@gmail.com&quot;, &quot;rosalind.franklin@aol.it&quot;) Keep only email addresses finishing with “es”: grep(pattern=&quot;es$&quot;, x=vec_ad, value=TRUE) ## [1] &quot;marie.curie@yahoo.es&quot; "],
["substitute-or-remove-matching-patterns-with-gsub.html", "13.3 Substitute or remove matching patterns with gsub", " 13.3 Substitute or remove matching patterns with gsub From the same vector of email addresses: Remove the “@” symbol and the email provider from each address gsub(pattern=&quot;@[a-z.]+&quot;, replacement=&quot;&quot;, x=vec_ad) ## [1] &quot;marie.curie&quot; &quot;albert.einstein01&quot; &quot;charles.darwin1809&quot; ## [4] &quot;rosalind.franklin&quot; Substitute the “@” symbol with “at” gsub(pattern=&quot;@&quot;, replacement=&quot;_at_&quot;, x=vec_ad) ## [1] &quot;marie.curie_at_yahoo.es&quot; &quot;albert.einstein01_at_hotmail.com&quot; ## [3] &quot;charles.darwin1809_at_gmail.com&quot; &quot;rosalind.franklin_at_aol.it&quot; Substitute “es” and “it” by “eu” gsub(pattern=&quot;es$|it$&quot;, replacement=&quot;eu&quot;, x=vec_ad) ## [1] &quot;marie.curie@yahoo.eu&quot; &quot;albert.einstein01@hotmail.com&quot; ## [3] &quot;charles.darwin1809@gmail.com&quot; &quot;rosalind.franklin@aol.eu&quot; "],
["predefined-variables-to-use-in-regular-expressions.html", "13.4 Predefined variables to use in regular expressions:", " 13.4 Predefined variables to use in regular expressions: [:lower:] | Lower-case letters | [:upper:] | Upper-case letters | [:alpha:] | Alphabetic characters: [:lower:] and [:upper:] | [:digit:] | Digits: 0 1 2 3 4 5 6 7 8 9 | [:alnum:] | Alphanumeric characters: [:alpha:] and [:digit:] | [:print:] | Printable characters: [:alnum:], [:punct:] and space. | [:punct:] | Punctuation characters: ! &quot; # $ % &amp; ’ ( ) * + , - . / : ; &lt; = &gt; ? @ [  ] ^ _ ` { | } ~ | [:blank:] | Blank characters: space and tab | Take the previous character vector containing email addresses: Remove the @ and the email provider from each address gsub(pattern=&quot;@[[:lower:][:punct:]]+&quot;, replacement=&quot;&quot;, x=vec_ad) ## [1] &quot;marie.curie&quot; &quot;albert.einstein01&quot; &quot;charles.darwin1809&quot; ## [4] &quot;rosalind.franklin&quot; * Same thing but remove additionally any number(s) BEFORE the @ (if any): gsub(pattern=&quot;[[:digit:]]*@[[:lower:][:punct:]]+&quot;, replacement=&quot;&quot;, x=vec_ad) ## [1] &quot;marie.curie&quot; &quot;albert.einstein&quot; &quot;charles.darwin&quot; ## [4] &quot;rosalind.franklin&quot; * Same but simplified: gsub(pattern=&quot;[[:digit:]]*@[[:print:]]+&quot;, replacement=&quot;&quot;, x=vec_ad) ## [1] &quot;marie.curie&quot; &quot;albert.einstein&quot; &quot;charles.darwin&quot; ## [4] &quot;rosalind.franklin&quot; "],
["use-grep-and-regular-expressions-to-retrieve-columns-by-their-names.html", "13.5 Use grep and regular expressions to retrieve columns by their names", " 13.5 Use grep and regular expressions to retrieve columns by their names Example of a data frame: # Build data frame df_regex &lt;- data.frame(expression1=1:4, expression2=2:5, expression3=4:7, annotation=LETTERS[1:4], expression4=6:3, average_expression=c(3.25, 3.75, 4.25, 4.75), stringsAsFactors=FALSE) # Select column names that start with &quot;expression&quot; grep(pattern=&quot;^expression&quot;, x=colnames(df_regex)) ## [1] 1 2 3 5 # Select columns from df_regex if their names start with &quot;expression&quot; df_regex[, grep(pattern=&quot;^expression&quot;, colnames(df_regex))] ## expression1 expression2 expression3 expression4 ## 1 1 2 4 6 ## 2 2 3 5 5 ## 3 3 4 6 4 ## 4 4 5 7 3 "],
["exercise-8-regular-expressions.html", "13.6 Exercise 8: Regular expressions", " 13.6 Exercise 8: Regular expressions Create the script “exercise8.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 8 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module2&quot;) 1- Play with grep Create the following data frame df2 &lt;- data.frame(age=c(32, 45, 12, 67, 40, 27), citizenship=c(&quot;England&quot;, &quot;India&quot;, &quot;Spain&quot;, &quot;Brasil&quot;, &quot;Tunisia&quot;, &quot;Poland&quot;), row.names=paste(rep(c(&quot;Patient&quot;, &quot;Doctor&quot;), c(4, 2)), 1:6, sep=&quot;&quot;), stringsAsFactors=FALSE) Using grep: create a smaller data frame df3 that contains only the Patient but NOT the Doctor information. correction # Select row names rownames(df2) ## [1] &quot;Patient1&quot; &quot;Patient2&quot; &quot;Patient3&quot; &quot;Patient4&quot; &quot;Doctor5&quot; &quot;Doctor6&quot; # Select only rownames that correspond to patients grep(&quot;Patient&quot;, rownames(df2)) ## [1] 1 2 3 4 # Create data frame that contains only those rows df3 &lt;- df2[grep(&quot;Patient&quot;, rownames(df2)), ] 2- Play with gsub Build this vector of file names: vector1 &lt;- c(&quot;L2_sample1_GTAGCG.fastq.gz&quot;, &quot;L1_sample2_ATTGCC.fastq.gz&quot;, &quot;L1_sample3_TGTTAC.fastq.gz&quot;, &quot;L4_sample4_ATGGTA.fastq.gz&quot;) Use gsub and an appropriate regular expression to remove all but “sample1”, “sample2”, “sample3” and “sample4” from vector1. correction # | is used as OR gsub(pattern=&quot;L[124]{1}_|_[ATGC]{6}.fastq.gz&quot;, replacement=&quot;&quot;, x=vector1) ## [1] &quot;sample1&quot; &quot;sample2&quot; &quot;sample3&quot; &quot;sample4&quot; "],
["repetitive-execution.html", "Part14 Repetitive execution", " Part14 Repetitive execution Loops are used to repeat a specific block of code. Structure of the for loop: for(i in vector_expression){ action_command } 3 main elements: * i is the loop variable: it is updated at each iteration. * vector_expression: value attributed to i at each iteration (the number of iterations is the length of vector_expression). * action_command: what is to be done at each iteration. Note the usage of curly brakets {} to start and end the loop! Example: for(i in 2:5){ y &lt;- i*2 print(y) } ## [1] 4 ## [1] 6 ## [1] 8 ## [1] 10 Example of a for loop that iterates over a character vector: # Character vector myfruits &lt;- c(&quot;apple&quot;, &quot;pear&quot;, &quot;grape&quot;) # For loop that prints the current element and its number of characters for(j in myfruits){ print(j) print(nchar(j)) } ## [1] &quot;apple&quot; ## [1] 5 ## [1] &quot;pear&quot; ## [1] 4 ## [1] &quot;grape&quot; ## [1] 5 Example of a for loop that iterates over each row of a matrix, and prints the minimum value of that row : # Matrix mymat &lt;- matrix(rnorm(800), nrow=50) # For loop over mymat rows for(i in 1:nrow(mymat)){ print(i) print(min(mymat[i,])) } ## [1] 1 ## [1] -1.302245 ## [1] 2 ## [1] -1.676981 ## [1] 3 ## [1] -1.196015 ## [1] 4 ## [1] -2.806083 ## [1] 5 ## [1] -2.369012 ## [1] 6 ## [1] -2.412379 ## [1] 7 ## [1] -2.695529 ## [1] 8 ## [1] -3.101285 ## [1] 9 ## [1] -2.001403 ## [1] 10 ## [1] -1.775279 ## [1] 11 ## [1] -1.893496 ## [1] 12 ## [1] -2.349828 ## [1] 13 ## [1] -1.619585 ## [1] 14 ## [1] -1.066003 ## [1] 15 ## [1] -1.497021 ## [1] 16 ## [1] -1.400743 ## [1] 17 ## [1] -2.874942 ## [1] 18 ## [1] -2.184579 ## [1] 19 ## [1] -1.504274 ## [1] 20 ## [1] -2.172213 ## [1] 21 ## [1] -1.338849 ## [1] 22 ## [1] -1.376689 ## [1] 23 ## [1] -1.307128 ## [1] 24 ## [1] -1.438287 ## [1] 25 ## [1] -2.108979 ## [1] 26 ## [1] -1.619519 ## [1] 27 ## [1] -1.828345 ## [1] 28 ## [1] -1.715963 ## [1] 29 ## [1] -1.982181 ## [1] 30 ## [1] -1.488884 ## [1] 31 ## [1] -2.226057 ## [1] 32 ## [1] -1.195805 ## [1] 33 ## [1] -2.657302 ## [1] 34 ## [1] -1.350658 ## [1] 35 ## [1] -1.51192 ## [1] 36 ## [1] -1.870979 ## [1] 37 ## [1] -1.390813 ## [1] 38 ## [1] -2.656808 ## [1] 39 ## [1] -1.141823 ## [1] 40 ## [1] -1.850249 ## [1] 41 ## [1] -2.103125 ## [1] 42 ## [1] -2.386308 ## [1] 43 ## [1] -2.562332 ## [1] 44 ## [1] -1.66199 ## [1] 45 ## [1] -1.542725 ## [1] 46 ## [1] -1.615211 ## [1] 47 ## [1] -0.8306144 ## [1] 48 ## [1] -2.067982 ## [1] 49 ## [1] -1.28216 ## [1] 50 ## [1] -1.558054 "],
["exercise-9-for-loop.html", "14.1 Exercise 9: For loop", " 14.1 Exercise 9: For loop Create the script “exercise9.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 9 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module2&quot;) 1- Write a for loop that iterates over 2 to 10 and prints the square root of each number (function sqrt()). correction for(i in 2:10){ print(sqrt(i)) } ## [1] 1.414214 ## [1] 1.732051 ## [1] 2 ## [1] 2.236068 ## [1] 2.44949 ## [1] 2.645751 ## [1] 2.828427 ## [1] 3 ## [1] 3.162278 2- Write a for loop that iterates over 5 to 15 and prints a vector of 2 elements containing each number and its square root correction for(i in 5:15){ veci &lt;- c(i, sqrt(i)) print(veci) } ## [1] 5.000000 2.236068 ## [1] 6.00000 2.44949 ## [1] 7.000000 2.645751 ## [1] 8.000000 2.828427 ## [1] 9 3 ## [1] 10.000000 3.162278 ## [1] 11.000000 3.316625 ## [1] 12.000000 3.464102 ## [1] 13.000000 3.605551 ## [1] 14.000000 3.741657 ## [1] 15.000000 3.872983 3- Create the following matrix mat1 &lt;- matrix(rnorm(40), nrow=20) Write a for loop that iterates over each row of mat1 and prints the median value of each row. correction for(j in 1:nrow(mat1)){ # extract the row rowj &lt;- mat1[j,] # print rowj print(rowj) # print median value in row print(median(rowj)) } ## [1] -0.4340862 1.0116672 ## [1] 0.2887905 ## [1] 0.1224976 0.3292072 ## [1] 0.2258524 ## [1] -2.534471 -1.672997 ## [1] -2.103734 ## [1] -0.2385856 0.9272744 ## [1] 0.3443444 ## [1] -1.463828 1.247498 ## [1] -0.1081649 ## [1] 0.8414449 0.7519016 ## [1] 0.7966733 ## [1] 1.0921350 -0.9161885 ## [1] 0.08797323 ## [1] -1.9674175 -0.4931046 ## [1] -1.230261 ## [1] -0.7141712 -0.6492121 ## [1] -0.6816917 ## [1] 1.0818456 0.2308486 ## [1] 0.6563471 ## [1] 1.2010953 0.6753097 ## [1] 0.9382025 ## [1] -1.0922622 0.4566863 ## [1] -0.317788 ## [1] -0.8439399 0.9427182 ## [1] 0.04938917 ## [1] -0.8756452 -0.1461592 ## [1] -0.5109022 ## [1] 1.068977 -1.177197 ## [1] -0.05411016 ## [1] -0.3181925 0.6704593 ## [1] 0.1761334 ## [1] -0.450344 -1.353209 ## [1] -0.9017764 ## [1] -1.142172 -1.018902 ## [1] -1.080537 ## [1] -0.1784857 -0.9767175 ## [1] -0.5776016 ## [1] 1.108961 1.121339 ## [1] 1.11515 "],
["conditional-statement.html", "Part15 Conditional statement", " Part15 Conditional statement “if” statement Structure of the if statement: if(condition){ action_command } If the condition is TRUE, then proceed to the action_command; if it is FALSE, nothing happens. k &lt;- 10 # print if value is &gt; 3 if(k &gt; 3){ print(k) } # print if value is &lt; 3 if(k &lt; 3){ print(k) } With else if(condition){ action_command1 }else{ action_command2 } If the condition is TRUE, then proceed to the action_command1; if the condition is FALSE, proceed to action_command2. k &lt;- 3 if(k &gt; 3){ print(&quot;greater than 3&quot;) }else{ print(&quot;less than 3&quot;) } With else if if(condition1){ action_command1 }else if(condition2){ action_command2 }else{ action_command3 } If the condition1 is TRUE, then proceed to the action_command1; if the condition1 is FALSE, test for condition2: if the condition2 is TRUE, proceed to the action_command2; if neither condition1 nor condition2 are TRUE, then proceed to the action_command3. Note that you can add up as many else if statements as you want. Example without else k &lt;- -2 # Test whether k is positive or negative or equal to 0 if(k &lt; 0){ print(&quot;negative&quot;) }else if(k &gt; 0){ print(&quot;positive&quot;) }else if(k == 0){ print(&quot;is 0&quot;) } Example with else k &lt;- 10 # print if value is &lt;= 3 if(k &lt;= 3){ print(&quot;less than or equal to 3&quot;) }else if(k &gt;= 8){ print(&quot;greater than or equal to 8&quot;) }else{ print(&quot;greater than 3 and less than 8&quot;) } If statement in For loop: # Matrix mymat &lt;- matrix(rnorm(800), nrow=50) # Loop over rows of mymat and print row if its median value is &gt; 0 for(i in 1:nrow(mymat)){ # extract the current row rowi &lt;- mymat[i,] # if median of row is &gt; 0, print row if(median(rowi) &gt; 0){ print(rowi) } } "],
["exercise-10-if-statement.html", "15.1 Exercise 10: If statement", " 15.1 Exercise 10: If statement Create the script “exercise10.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 10 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module2&quot;) 1- Create vector vec2 as: vec2 &lt;- c(&quot;kiwi&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;grape&quot;) Use an if statement and the %in% function to check whether “apple” is present in vec2 (in such case print “there is an apple!”) correction if(&quot;apple&quot; %in% vec2){ print(&quot;there is an apple there&quot;) } ## [1] &quot;there is an apple there&quot; Use an if statement and the %in% function to check whether “grapefruit” is present in vec2: if “grapefruit” is not found, test for a second condition (using else if) that checks if “pear” is found. correction if(&quot;grapefruit&quot; %in% vec2){ print(&quot;there is a grapefruit there&quot;) }else if(&quot;pear&quot; %in% vec2){ print(&quot;there is no grapefruit but there is a pear&quot;) } ## [1] &quot;there is no grapefruit but there is a pear&quot; Add an else section in case neither grapefruit nor pear is found in vec2. Test your if statement also on vec3: vec3 &lt;- c(&quot;cherry&quot;, &quot;strawberry&quot;, &quot;blueberry&quot;, &quot;peach&quot;) correction if(&quot;grapefruit&quot; %in% vec2){ print(&quot;there is a grapefruit there&quot;) }else if(&quot;pear&quot; %in% vec2){ print(&quot;there is no grapefruit but there is a pear&quot;) }else{ print(&quot;no grapefruit and no pear&quot;) } ## [1] &quot;there is no grapefruit but there is a pear&quot; 2- If statement in for loop Create the following matrix: mat4 &lt;- matrix(c(2, 34, 1, NA, 89, 7, 12, NA, 0, 38), nrow=5) Loop over rows with for of mat4 and print row number and entire row if you find an NA. correction for(k in 1:nrow(mat4)){ # extract row rowk &lt;- mat4[k,] if(any(is.na(rowk))){ print(k) print(rowk) } } ## [1] 3 ## [1] 1 NA ## [1] 4 ## [1] NA 0 3- For loop, if statement and regular expression Create vector vec4 as: vec4 &lt;- c(&quot;Oct4&quot;, &quot;DEPP&quot;, &quot;RSU1&quot;, &quot;Hk2&quot;, &quot;ZNF37A&quot;, &quot;C1QL1&quot;, &quot;Shh&quot;, &quot;Cdkn2a&quot;) Loop over each element of “vec4”: * If the element is a human gene (all upper-case characters), print a vector of two elements: the name of the gene and “human gene”. * If the element is a mouse gene (only the first character is in upper-case), print a vector of two elements: the name of the gene and “mouse gene”. Tip 1: Use grep and a regular expression in the if statement ! Tip 2: When grep does not find a match, it returns an element of length 0 ! Tip 3: You can also use grepl: check the help page correction for(gene in vec4){ if(length(grep(pattern=&quot;^[A-Z0-9]+$&quot;, x=gene)) != 0){ print(c(gene, &quot;human gene&quot;)) }else if(length(grep(pattern=&quot;^[A-Z]{1}[a-z0-9]+$&quot;, x=gene)) != 0){ print(c(gene, &quot;mouse gene&quot;)) } } ## [1] &quot;Oct4&quot; &quot;mouse gene&quot; ## [1] &quot;DEPP&quot; &quot;human gene&quot; ## [1] &quot;RSU1&quot; &quot;human gene&quot; ## [1] &quot;Hk2&quot; &quot;mouse gene&quot; ## [1] &quot;ZNF37A&quot; &quot;human gene&quot; ## [1] &quot;C1QL1&quot; &quot;human gene&quot; ## [1] &quot;Shh&quot; &quot;mouse gene&quot; ## [1] &quot;Cdkn2a&quot; &quot;mouse gene&quot; # With grepl for(gene in vec4){ if(grepl(pattern=&quot;^[A-Z0-9]+$&quot;, x=gene)){ print(c(gene, &quot;human gene&quot;)) }else if(grepl(pattern=&quot;^[A-Z]{1}[a-z0-9]+$&quot;, x=gene)){ print(c(gene, &quot;mouse gene&quot;)) } } ## [1] &quot;Oct4&quot; &quot;mouse gene&quot; ## [1] &quot;DEPP&quot; &quot;human gene&quot; ## [1] &quot;RSU1&quot; &quot;human gene&quot; ## [1] &quot;Hk2&quot; &quot;mouse gene&quot; ## [1] &quot;ZNF37A&quot; &quot;human gene&quot; ## [1] &quot;C1QL1&quot; &quot;human gene&quot; ## [1] &quot;Shh&quot; &quot;mouse gene&quot; ## [1] &quot;Cdkn2a&quot; &quot;mouse gene&quot; "],
["basic-plots-in-r.html", "Part16 Basic plots in R", " Part16 Basic plots in R R-base package graphics offers functions for producing many plots, for example: scatter plots - plot() bar plots - barplot() pie charts - pie() box plots - boxplot() histograms - hist() "],
["scatter-plots.html", "16.1 Scatter plots", " 16.1 Scatter plots A scatter plot has points that show the relationship between two sets of data. Simple scatter plot # Create 2 vectors x &lt;- 1:10 y &lt;- x^2 # Plot x against y plot(x, y) Note that if one vector only is given as an input, it will be plotted against the indices of each element Add arguments: col: color pch: type of point type: “l” for line, “p” for point, “b” for both point and line main: title of the plot plot(x, y, col=&quot;red&quot;, pch=2, type=&quot;b&quot;, main=&quot;a pretty scatter plot&quot;) You can play a bit: plot(x, y, col=1:10, pch=1:10, cex=1:10, type=&quot;b&quot;, main=&quot;an even prettier scatter plot&quot;) Different type of points that you can use: About colors Color codes 1 to 8 are taken from the palette() function and respectively code for: “black”, “red”, “green3”, “blue”, “cyan”, “magenta”, “yellow”, “gray”. # see the 8-color palette: palette() ## [1] &quot;black&quot; &quot;red&quot; There is a larger set of build-in colors that you can use: # see all 657 possible build-in colors: colors() ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; ## [4] &quot;antiquewhite1&quot; &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; ## [7] &quot;antiquewhite4&quot; &quot;aquamarine&quot; &quot;aquamarine1&quot; ## [10] &quot;aquamarine2&quot; &quot;aquamarine3&quot; &quot;aquamarine4&quot; ## [13] &quot;azure&quot; &quot;azure1&quot; &quot;azure2&quot; ## [16] &quot;azure3&quot; &quot;azure4&quot; &quot;beige&quot; ## [19] &quot;bisque&quot; &quot;bisque1&quot; &quot;bisque2&quot; ## [22] &quot;bisque3&quot; &quot;bisque4&quot; &quot;black&quot; ## [25] &quot;blanchedalmond&quot; &quot;blue&quot; &quot;blue1&quot; ## [28] &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; ## [31] &quot;blueviolet&quot; &quot;brown&quot; &quot;brown1&quot; ## [34] &quot;brown2&quot; &quot;brown3&quot; &quot;brown4&quot; ## [37] &quot;burlywood&quot; &quot;burlywood1&quot; &quot;burlywood2&quot; ## [40] &quot;burlywood3&quot; &quot;burlywood4&quot; &quot;cadetblue&quot; ## [43] &quot;cadetblue1&quot; &quot;cadetblue2&quot; &quot;cadetblue3&quot; ## [46] &quot;cadetblue4&quot; &quot;chartreuse&quot; &quot;chartreuse1&quot; ## [49] &quot;chartreuse2&quot; &quot;chartreuse3&quot; &quot;chartreuse4&quot; ## [52] &quot;chocolate&quot; &quot;chocolate1&quot; &quot;chocolate2&quot; ## [55] &quot;chocolate3&quot; &quot;chocolate4&quot; &quot;coral&quot; ## [58] &quot;coral1&quot; &quot;coral2&quot; &quot;coral3&quot; ## [61] &quot;coral4&quot; &quot;cornflowerblue&quot; &quot;cornsilk&quot; ## [64] &quot;cornsilk1&quot; &quot;cornsilk2&quot; &quot;cornsilk3&quot; ## [67] &quot;cornsilk4&quot; &quot;cyan&quot; &quot;cyan1&quot; ## [70] &quot;cyan2&quot; &quot;cyan3&quot; &quot;cyan4&quot; ## [73] &quot;darkblue&quot; &quot;darkcyan&quot; &quot;darkgoldenrod&quot; ## [76] &quot;darkgoldenrod1&quot; &quot;darkgoldenrod2&quot; &quot;darkgoldenrod3&quot; ## [79] &quot;darkgoldenrod4&quot; &quot;darkgray&quot; &quot;darkgreen&quot; ## [82] &quot;darkgrey&quot; &quot;darkkhaki&quot; &quot;darkmagenta&quot; ## [85] &quot;darkolivegreen&quot; &quot;darkolivegreen1&quot; &quot;darkolivegreen2&quot; ## [88] &quot;darkolivegreen3&quot; &quot;darkolivegreen4&quot; &quot;darkorange&quot; ## [91] &quot;darkorange1&quot; &quot;darkorange2&quot; &quot;darkorange3&quot; ## [94] &quot;darkorange4&quot; &quot;darkorchid&quot; &quot;darkorchid1&quot; ## [97] &quot;darkorchid2&quot; &quot;darkorchid3&quot; &quot;darkorchid4&quot; ## [100] &quot;darkred&quot; &quot;darksalmon&quot; &quot;darkseagreen&quot; ## [103] &quot;darkseagreen1&quot; &quot;darkseagreen2&quot; &quot;darkseagreen3&quot; ## [106] &quot;darkseagreen4&quot; &quot;darkslateblue&quot; &quot;darkslategray&quot; ## [109] &quot;darkslategray1&quot; &quot;darkslategray2&quot; &quot;darkslategray3&quot; ## [112] &quot;darkslategray4&quot; &quot;darkslategrey&quot; &quot;darkturquoise&quot; ## [115] &quot;darkviolet&quot; &quot;deeppink&quot; &quot;deeppink1&quot; ## [118] &quot;deeppink2&quot; &quot;deeppink3&quot; &quot;deeppink4&quot; ## [121] &quot;deepskyblue&quot; &quot;deepskyblue1&quot; &quot;deepskyblue2&quot; ## [124] &quot;deepskyblue3&quot; &quot;deepskyblue4&quot; &quot;dimgray&quot; ## [127] &quot;dimgrey&quot; &quot;dodgerblue&quot; &quot;dodgerblue1&quot; ## [130] &quot;dodgerblue2&quot; &quot;dodgerblue3&quot; &quot;dodgerblue4&quot; ## [133] &quot;firebrick&quot; &quot;firebrick1&quot; &quot;firebrick2&quot; ## [136] &quot;firebrick3&quot; &quot;firebrick4&quot; &quot;floralwhite&quot; ## [139] &quot;forestgreen&quot; &quot;gainsboro&quot; &quot;ghostwhite&quot; ## [142] &quot;gold&quot; &quot;gold1&quot; &quot;gold2&quot; ## [145] &quot;gold3&quot; &quot;gold4&quot; &quot;goldenrod&quot; ## [148] &quot;goldenrod1&quot; &quot;goldenrod2&quot; &quot;goldenrod3&quot; ## [151] &quot;goldenrod4&quot; &quot;gray&quot; &quot;gray0&quot; ## [154] &quot;gray1&quot; &quot;gray2&quot; &quot;gray3&quot; ## [157] &quot;gray4&quot; &quot;gray5&quot; &quot;gray6&quot; ## [160] &quot;gray7&quot; &quot;gray8&quot; &quot;gray9&quot; ## [163] &quot;gray10&quot; &quot;gray11&quot; &quot;gray12&quot; ## [166] &quot;gray13&quot; &quot;gray14&quot; &quot;gray15&quot; ## [169] &quot;gray16&quot; &quot;gray17&quot; &quot;gray18&quot; ## [172] &quot;gray19&quot; &quot;gray20&quot; &quot;gray21&quot; ## [175] &quot;gray22&quot; &quot;gray23&quot; &quot;gray24&quot; ## [178] &quot;gray25&quot; &quot;gray26&quot; &quot;gray27&quot; ## [181] &quot;gray28&quot; &quot;gray29&quot; &quot;gray30&quot; ## [184] &quot;gray31&quot; &quot;gray32&quot; &quot;gray33&quot; ## [187] &quot;gray34&quot; &quot;gray35&quot; &quot;gray36&quot; ## [190] &quot;gray37&quot; &quot;gray38&quot; &quot;gray39&quot; ## [193] &quot;gray40&quot; &quot;gray41&quot; &quot;gray42&quot; ## [196] &quot;gray43&quot; &quot;gray44&quot; &quot;gray45&quot; ## [199] &quot;gray46&quot; &quot;gray47&quot; &quot;gray48&quot; ## [202] &quot;gray49&quot; &quot;gray50&quot; &quot;gray51&quot; ## [205] &quot;gray52&quot; &quot;gray53&quot; &quot;gray54&quot; ## [208] &quot;gray55&quot; &quot;gray56&quot; &quot;gray57&quot; ## [211] &quot;gray58&quot; &quot;gray59&quot; &quot;gray60&quot; ## [214] &quot;gray61&quot; &quot;gray62&quot; &quot;gray63&quot; ## [217] &quot;gray64&quot; &quot;gray65&quot; &quot;gray66&quot; ## [220] &quot;gray67&quot; &quot;gray68&quot; &quot;gray69&quot; ## [223] &quot;gray70&quot; &quot;gray71&quot; &quot;gray72&quot; ## [226] &quot;gray73&quot; &quot;gray74&quot; &quot;gray75&quot; ## [229] &quot;gray76&quot; &quot;gray77&quot; &quot;gray78&quot; ## [232] &quot;gray79&quot; &quot;gray80&quot; &quot;gray81&quot; ## [235] &quot;gray82&quot; &quot;gray83&quot; &quot;gray84&quot; ## [238] &quot;gray85&quot; &quot;gray86&quot; &quot;gray87&quot; ## [241] &quot;gray88&quot; &quot;gray89&quot; &quot;gray90&quot; ## [244] &quot;gray91&quot; &quot;gray92&quot; &quot;gray93&quot; ## [247] &quot;gray94&quot; &quot;gray95&quot; &quot;gray96&quot; ## [250] &quot;gray97&quot; &quot;gray98&quot; &quot;gray99&quot; ## [253] &quot;gray100&quot; &quot;green&quot; &quot;green1&quot; ## [256] &quot;green2&quot; &quot;green3&quot; &quot;green4&quot; ## [259] &quot;greenyellow&quot; &quot;grey&quot; &quot;grey0&quot; ## [262] &quot;grey1&quot; &quot;grey2&quot; &quot;grey3&quot; ## [265] &quot;grey4&quot; &quot;grey5&quot; &quot;grey6&quot; ## [268] &quot;grey7&quot; &quot;grey8&quot; &quot;grey9&quot; ## [271] &quot;grey10&quot; &quot;grey11&quot; &quot;grey12&quot; ## [274] &quot;grey13&quot; &quot;grey14&quot; &quot;grey15&quot; ## [277] &quot;grey16&quot; &quot;grey17&quot; &quot;grey18&quot; ## [280] &quot;grey19&quot; &quot;grey20&quot; &quot;grey21&quot; ## [283] &quot;grey22&quot; &quot;grey23&quot; &quot;grey24&quot; ## [286] &quot;grey25&quot; &quot;grey26&quot; &quot;grey27&quot; ## [289] &quot;grey28&quot; &quot;grey29&quot; &quot;grey30&quot; ## [292] &quot;grey31&quot; &quot;grey32&quot; &quot;grey33&quot; ## [295] &quot;grey34&quot; &quot;grey35&quot; &quot;grey36&quot; ## [298] &quot;grey37&quot; &quot;grey38&quot; &quot;grey39&quot; ## [301] &quot;grey40&quot; &quot;grey41&quot; &quot;grey42&quot; ## [304] &quot;grey43&quot; &quot;grey44&quot; &quot;grey45&quot; ## [307] &quot;grey46&quot; &quot;grey47&quot; &quot;grey48&quot; ## [310] &quot;grey49&quot; &quot;grey50&quot; &quot;grey51&quot; ## [313] &quot;grey52&quot; &quot;grey53&quot; &quot;grey54&quot; ## [316] &quot;grey55&quot; &quot;grey56&quot; &quot;grey57&quot; ## [319] &quot;grey58&quot; &quot;grey59&quot; &quot;grey60&quot; ## [322] &quot;grey61&quot; &quot;grey62&quot; &quot;grey63&quot; ## [325] &quot;grey64&quot; &quot;grey65&quot; &quot;grey66&quot; ## [328] &quot;grey67&quot; &quot;grey68&quot; &quot;grey69&quot; ## [331] &quot;grey70&quot; &quot;grey71&quot; &quot;grey72&quot; ## [334] &quot;grey73&quot; &quot;grey74&quot; &quot;grey75&quot; ## [337] &quot;grey76&quot; &quot;grey77&quot; &quot;grey78&quot; ## [340] &quot;grey79&quot; &quot;grey80&quot; &quot;grey81&quot; ## [343] &quot;grey82&quot; &quot;grey83&quot; &quot;grey84&quot; ## [346] &quot;grey85&quot; &quot;grey86&quot; &quot;grey87&quot; ## [349] &quot;grey88&quot; &quot;grey89&quot; &quot;grey90&quot; ## [352] &quot;grey91&quot; &quot;grey92&quot; &quot;grey93&quot; ## [355] &quot;grey94&quot; &quot;grey95&quot; &quot;grey96&quot; ## [358] &quot;grey97&quot; &quot;grey98&quot; &quot;grey99&quot; ## [361] &quot;grey100&quot; &quot;honeydew&quot; &quot;honeydew1&quot; ## [364] &quot;honeydew2&quot; &quot;honeydew3&quot; &quot;honeydew4&quot; ## [367] &quot;hotpink&quot; &quot;hotpink1&quot; &quot;hotpink2&quot; ## [370] &quot;hotpink3&quot; &quot;hotpink4&quot; &quot;indianred&quot; ## [373] &quot;indianred1&quot; &quot;indianred2&quot; &quot;indianred3&quot; ## [376] &quot;indianred4&quot; &quot;ivory&quot; &quot;ivory1&quot; ## [379] &quot;ivory2&quot; &quot;ivory3&quot; &quot;ivory4&quot; ## [382] &quot;khaki&quot; &quot;khaki1&quot; &quot;khaki2&quot; ## [385] &quot;khaki3&quot; &quot;khaki4&quot; &quot;lavender&quot; ## [388] &quot;lavenderblush&quot; &quot;lavenderblush1&quot; &quot;lavenderblush2&quot; ## [391] &quot;lavenderblush3&quot; &quot;lavenderblush4&quot; &quot;lawngreen&quot; ## [394] &quot;lemonchiffon&quot; &quot;lemonchiffon1&quot; &quot;lemonchiffon2&quot; ## [397] &quot;lemonchiffon3&quot; &quot;lemonchiffon4&quot; &quot;lightblue&quot; ## [400] &quot;lightblue1&quot; &quot;lightblue2&quot; &quot;lightblue3&quot; ## [403] &quot;lightblue4&quot; &quot;lightcoral&quot; &quot;lightcyan&quot; ## [406] &quot;lightcyan1&quot; &quot;lightcyan2&quot; &quot;lightcyan3&quot; ## [409] &quot;lightcyan4&quot; &quot;lightgoldenrod&quot; &quot;lightgoldenrod1&quot; ## [412] &quot;lightgoldenrod2&quot; &quot;lightgoldenrod3&quot; &quot;lightgoldenrod4&quot; ## [415] &quot;lightgoldenrodyellow&quot; &quot;lightgray&quot; &quot;lightgreen&quot; ## [418] &quot;lightgrey&quot; &quot;lightpink&quot; &quot;lightpink1&quot; ## [421] &quot;lightpink2&quot; &quot;lightpink3&quot; &quot;lightpink4&quot; ## [424] &quot;lightsalmon&quot; &quot;lightsalmon1&quot; &quot;lightsalmon2&quot; ## [427] &quot;lightsalmon3&quot; &quot;lightsalmon4&quot; &quot;lightseagreen&quot; ## [430] &quot;lightskyblue&quot; &quot;lightskyblue1&quot; &quot;lightskyblue2&quot; ## [433] &quot;lightskyblue3&quot; &quot;lightskyblue4&quot; &quot;lightslateblue&quot; ## [436] &quot;lightslategray&quot; &quot;lightslategrey&quot; &quot;lightsteelblue&quot; ## [439] &quot;lightsteelblue1&quot; &quot;lightsteelblue2&quot; &quot;lightsteelblue3&quot; ## [442] &quot;lightsteelblue4&quot; &quot;lightyellow&quot; &quot;lightyellow1&quot; ## [445] &quot;lightyellow2&quot; &quot;lightyellow3&quot; &quot;lightyellow4&quot; ## [448] &quot;limegreen&quot; &quot;linen&quot; &quot;magenta&quot; ## [451] &quot;magenta1&quot; &quot;magenta2&quot; &quot;magenta3&quot; ## [454] &quot;magenta4&quot; &quot;maroon&quot; &quot;maroon1&quot; ## [457] &quot;maroon2&quot; &quot;maroon3&quot; &quot;maroon4&quot; ## [460] &quot;mediumaquamarine&quot; &quot;mediumblue&quot; &quot;mediumorchid&quot; ## [463] &quot;mediumorchid1&quot; &quot;mediumorchid2&quot; &quot;mediumorchid3&quot; ## [466] &quot;mediumorchid4&quot; &quot;mediumpurple&quot; &quot;mediumpurple1&quot; ## [469] &quot;mediumpurple2&quot; &quot;mediumpurple3&quot; &quot;mediumpurple4&quot; ## [472] &quot;mediumseagreen&quot; &quot;mediumslateblue&quot; &quot;mediumspringgreen&quot; ## [475] &quot;mediumturquoise&quot; &quot;mediumvioletred&quot; &quot;midnightblue&quot; ## [478] &quot;mintcream&quot; &quot;mistyrose&quot; &quot;mistyrose1&quot; ## [481] &quot;mistyrose2&quot; &quot;mistyrose3&quot; &quot;mistyrose4&quot; ## [484] &quot;moccasin&quot; &quot;navajowhite&quot; &quot;navajowhite1&quot; ## [487] &quot;navajowhite2&quot; &quot;navajowhite3&quot; &quot;navajowhite4&quot; ## [490] &quot;navy&quot; &quot;navyblue&quot; &quot;oldlace&quot; ## [493] &quot;olivedrab&quot; &quot;olivedrab1&quot; &quot;olivedrab2&quot; ## [496] &quot;olivedrab3&quot; &quot;olivedrab4&quot; &quot;orange&quot; ## [499] &quot;orange1&quot; &quot;orange2&quot; &quot;orange3&quot; ## [502] &quot;orange4&quot; &quot;orangered&quot; &quot;orangered1&quot; ## [505] &quot;orangered2&quot; &quot;orangered3&quot; &quot;orangered4&quot; ## [508] &quot;orchid&quot; &quot;orchid1&quot; &quot;orchid2&quot; ## [511] &quot;orchid3&quot; &quot;orchid4&quot; &quot;palegoldenrod&quot; ## [514] &quot;palegreen&quot; &quot;palegreen1&quot; &quot;palegreen2&quot; ## [517] &quot;palegreen3&quot; &quot;palegreen4&quot; &quot;paleturquoise&quot; ## [520] &quot;paleturquoise1&quot; &quot;paleturquoise2&quot; &quot;paleturquoise3&quot; ## [523] &quot;paleturquoise4&quot; &quot;palevioletred&quot; &quot;palevioletred1&quot; ## [526] &quot;palevioletred2&quot; &quot;palevioletred3&quot; &quot;palevioletred4&quot; ## [529] &quot;papayawhip&quot; &quot;peachpuff&quot; &quot;peachpuff1&quot; ## [532] &quot;peachpuff2&quot; &quot;peachpuff3&quot; &quot;peachpuff4&quot; ## [535] &quot;peru&quot; &quot;pink&quot; &quot;pink1&quot; ## [538] &quot;pink2&quot; &quot;pink3&quot; &quot;pink4&quot; ## [541] &quot;plum&quot; &quot;plum1&quot; &quot;plum2&quot; ## [544] &quot;plum3&quot; &quot;plum4&quot; &quot;powderblue&quot; ## [547] &quot;purple&quot; &quot;purple1&quot; &quot;purple2&quot; ## [550] &quot;purple3&quot; &quot;purple4&quot; &quot;red&quot; ## [553] &quot;red1&quot; &quot;red2&quot; &quot;red3&quot; ## [556] &quot;red4&quot; &quot;rosybrown&quot; &quot;rosybrown1&quot; ## [559] &quot;rosybrown2&quot; &quot;rosybrown3&quot; &quot;rosybrown4&quot; ## [562] &quot;royalblue&quot; &quot;royalblue1&quot; &quot;royalblue2&quot; ## [565] &quot;royalblue3&quot; &quot;royalblue4&quot; &quot;saddlebrown&quot; ## [568] &quot;salmon&quot; &quot;salmon1&quot; &quot;salmon2&quot; ## [571] &quot;salmon3&quot; &quot;salmon4&quot; &quot;sandybrown&quot; ## [574] &quot;seagreen&quot; &quot;seagreen1&quot; &quot;seagreen2&quot; ## [577] &quot;seagreen3&quot; &quot;seagreen4&quot; &quot;seashell&quot; ## [580] &quot;seashell1&quot; &quot;seashell2&quot; &quot;seashell3&quot; ## [583] &quot;seashell4&quot; &quot;sienna&quot; &quot;sienna1&quot; ## [586] &quot;sienna2&quot; &quot;sienna3&quot; &quot;sienna4&quot; ## [589] &quot;skyblue&quot; &quot;skyblue1&quot; &quot;skyblue2&quot; ## [592] &quot;skyblue3&quot; &quot;skyblue4&quot; &quot;slateblue&quot; ## [595] &quot;slateblue1&quot; &quot;slateblue2&quot; &quot;slateblue3&quot; ## [598] &quot;slateblue4&quot; &quot;slategray&quot; &quot;slategray1&quot; ## [601] &quot;slategray2&quot; &quot;slategray3&quot; &quot;slategray4&quot; ## [604] &quot;slategrey&quot; &quot;snow&quot; &quot;snow1&quot; ## [607] &quot;snow2&quot; &quot;snow3&quot; &quot;snow4&quot; ## [610] &quot;springgreen&quot; &quot;springgreen1&quot; &quot;springgreen2&quot; ## [613] &quot;springgreen3&quot; &quot;springgreen4&quot; &quot;steelblue&quot; ## [616] &quot;steelblue1&quot; &quot;steelblue2&quot; &quot;steelblue3&quot; ## [619] &quot;steelblue4&quot; &quot;tan&quot; &quot;tan1&quot; ## [622] &quot;tan2&quot; &quot;tan3&quot; &quot;tan4&quot; ## [625] &quot;thistle&quot; &quot;thistle1&quot; &quot;thistle2&quot; ## [628] &quot;thistle3&quot; &quot;thistle4&quot; &quot;tomato&quot; ## [631] &quot;tomato1&quot; &quot;tomato2&quot; &quot;tomato3&quot; ## [634] &quot;tomato4&quot; &quot;turquoise&quot; &quot;turquoise1&quot; ## [637] &quot;turquoise2&quot; &quot;turquoise3&quot; &quot;turquoise4&quot; ## [640] &quot;violet&quot; &quot;violetred&quot; &quot;violetred1&quot; ## [643] &quot;violetred2&quot; &quot;violetred3&quot; &quot;violetred4&quot; ## [646] &quot;wheat&quot; &quot;wheat1&quot; &quot;wheat2&quot; ## [649] &quot;wheat3&quot; &quot;wheat4&quot; &quot;whitesmoke&quot; ## [652] &quot;yellow&quot; &quot;yellow1&quot; &quot;yellow2&quot; ## [655] &quot;yellow3&quot; &quot;yellow4&quot; &quot;yellowgreen&quot; # looking for blue only? You can pick from 66 blueish options: grep(&quot;blue&quot;, colors(), value=TRUE) ## [1] &quot;aliceblue&quot; &quot;blue&quot; &quot;blue1&quot; ## [4] &quot;blue2&quot; &quot;blue3&quot; &quot;blue4&quot; ## [7] &quot;blueviolet&quot; &quot;cadetblue&quot; &quot;cadetblue1&quot; ## [10] &quot;cadetblue2&quot; &quot;cadetblue3&quot; &quot;cadetblue4&quot; ## [13] &quot;cornflowerblue&quot; &quot;darkblue&quot; &quot;darkslateblue&quot; ## [16] &quot;deepskyblue&quot; &quot;deepskyblue1&quot; &quot;deepskyblue2&quot; ## [19] &quot;deepskyblue3&quot; &quot;deepskyblue4&quot; &quot;dodgerblue&quot; ## [22] &quot;dodgerblue1&quot; &quot;dodgerblue2&quot; &quot;dodgerblue3&quot; ## [25] &quot;dodgerblue4&quot; &quot;lightblue&quot; &quot;lightblue1&quot; ## [28] &quot;lightblue2&quot; &quot;lightblue3&quot; &quot;lightblue4&quot; ## [31] &quot;lightskyblue&quot; &quot;lightskyblue1&quot; &quot;lightskyblue2&quot; ## [34] &quot;lightskyblue3&quot; &quot;lightskyblue4&quot; &quot;lightslateblue&quot; ## [37] &quot;lightsteelblue&quot; &quot;lightsteelblue1&quot; &quot;lightsteelblue2&quot; ## [40] &quot;lightsteelblue3&quot; &quot;lightsteelblue4&quot; &quot;mediumblue&quot; ## [43] &quot;mediumslateblue&quot; &quot;midnightblue&quot; &quot;navyblue&quot; ## [46] &quot;powderblue&quot; &quot;royalblue&quot; &quot;royalblue1&quot; ## [49] &quot;royalblue2&quot; &quot;royalblue3&quot; &quot;royalblue4&quot; ## [52] &quot;skyblue&quot; &quot;skyblue1&quot; &quot;skyblue2&quot; ## [55] &quot;skyblue3&quot; &quot;skyblue4&quot; &quot;slateblue&quot; ## [58] &quot;slateblue1&quot; &quot;slateblue2&quot; &quot;slateblue3&quot; ## [61] &quot;slateblue4&quot; &quot;steelblue&quot; &quot;steelblue1&quot; ## [64] &quot;steelblue2&quot; &quot;steelblue3&quot; &quot;steelblue4&quot; You can also find them here. "],
["bar-plots.html", "16.2 Bar plots", " 16.2 Bar plots A bar chart or bar plot displays rectangular bars with lengths proportional to the values that they represent. A simple bar plot : # Create a vector x &lt;- rep(c(&quot;PhDstudent&quot;, &quot;Postdoc&quot;, &quot;Technician&quot;, &quot;PI&quot;), c(8,10,5,2)) # Count number of occurences of each character string mytable &lt;- table(x) # Bar plot using that table barplot(mytable) Customize a bit : col : color main : title of the plot las : orientation of x-axis labels: “2”: perpendicular to axis barplot(mytable, col=1:4, main=&quot;bar plot&quot;, las=2) Customize the ordering of the bars : By default, the bars are organized in alphabetical order. You can change it with the factors. # Create an ordered factor out of x xfact &lt;- factor(x, levels=c(&quot;PhDstudent&quot;, &quot;Postdoc&quot;, &quot;Technician&quot;, &quot;PI&quot;), ordered=TRUE) # Produce the table xfacttable &lt;- table(xfact) # Plot the same way barplot(xfacttable, col=1:4, main=&quot;reorganized bar plot&quot;, las=2) Let’s make a stacked barplot : # Create a matrix of number of type of employees per research program : barmat &lt;- matrix(c(8, 10, 9, 2, 6, 4, 5, 3, 14, 13, 16, 4, 11, 10, 8, 5), nrow=4, dimnames=list(c(&quot;Technician&quot;, &quot;PhDstudent&quot;, &quot;PostDoc&quot;, &quot;PI&quot;), c(&quot;BG&quot;, &quot;CDB&quot;, &quot;GRSCC&quot;, &quot;SB&quot;))) # Plot barplot barplot(barmat, col=sample(colors(), 4)) Add some parameters: # set a random color vector mycolors &lt;- sample(colors(), 4) # plot barplot # ylim sets the lower and upper limit of the y-axis: here it allows us to fit the legend ! barplot(barmat, col=mycolors, ylim=c(0,50), main=&quot;stacked barplot&quot;) # add a legend # first argument is the legend position legend(&quot;topleft&quot;, legend=c(&quot;Technician&quot;, &quot;PhDstudent&quot;, &quot;PostDoc&quot;, &quot;PI&quot;), fill=mycolors) "],
["pie-charts.html", "16.3 Pie charts", " 16.3 Pie charts A pie chart is a circular charts which is divided into slices, illustrating proportions. Using our previous vector, build a simple pie chart: # Create a vector x &lt;- rep(c(&quot;PhDstudent&quot;, &quot;Postdoc&quot;, &quot;Technician&quot;, &quot;PI&quot;), c(8,10,5,2)) # Count number of occurences of each string mytable &lt;- table(x) pie(mytable, main=&quot;pie chart&quot;, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;salmon&quot;, &quot;maroon&quot;)) "],
["box-plots.html", "16.4 Box plots", " 16.4 Box plots A boxplot is a convenient way to describe the distribution of the data. A simple boxplot: # Create a matrix of 1000 random values from the normal distribution (4 columns, 250 rows) x &lt;- matrix(rnorm(1000), ncol=4) # Basic boxplot boxplot(x) Add some arguments : xlab: x-axis label ylab: y-axis label at: position of each box along the x-axis: here we skip position 3 to allow more space between boxes 1/2 and 3/4 boxplot(x, xlab=&quot;sample&quot;, ylab=&quot;expression&quot;, at=c(1, 2, 4, 5)) Add an horizontal line at y=0 with abline(); arguments of abline : h : y-axis starting point of horizontal line (v for a vertical line) col : color lwd : line thickness lty : line type # First plot the box plot as before: boxplot(x, xlab=&quot;sample&quot;, ylab=&quot;expression&quot;, at=c(1, 2, 4, 5), main=&quot;my boxplot&quot;) # Then run the abline function abline(h=0, col=&quot;red&quot;, lwd=3, lty=&quot;dotdash&quot;) Line types in R: "],
["histograms.html", "16.5 Histograms", " 16.5 Histograms A histogram graphically summarizes the distribution of the data. A simple histogram # Vector of 200 random values from the normal distribution x &lt;- rnorm(200) # Plot histogram hist(x) Add parameters: border: color of bar borders breaks: number of bars the data is divided into cex.main: size of title cex.lab: size of axis labels hist(x, border=&quot;blue&quot;, breaks=50, main=&quot;Histogram&quot;, xlab=&quot;&quot;, cex.main=2.5, cex.lab=2) "],
["how-to-save-plots.html", "Part17 How to save plots ", " Part17 How to save plots "],
["with-r-studio.html", "17.1 With R Studio", " 17.1 With R Studio "],
["with-the-console.html", "17.2 With the console", " 17.2 With the console # Open the file that will contain your plot (the name is up to you) pdf(file=&quot;myplot.pdf&quot;) # execute the plot plot(1:10) # Close the file that will contain the plot dev.off() ## png ## 2 Formats R supports a variety of file formats for figures: pdf, png, jpeg, tiff, bmp, svg, ps. They all come with their own function, for example: # TIFF tiff(file=&quot;myfile.tiff&quot;) plot(1:10) dev.off() ## png ## 2 # JPEG jpeg(file=&quot;myfile.jpeg&quot;) plot(1:10) dev.off() ## png ## 2 # etc. The size of the output file can be changed: # Default: 7 inches (both width and height) for svg, pdf, ps. svg(file=&quot;myfile.svg&quot;, width=8, height=12) plot(1:10) dev.off() ## png ## 2 # Default: 480 pixels (both width and height) for jpeg, tiff, png, bmp. png(file=&quot;myfile.png&quot;, width=500, height=600) plot(1:10) dev.off() ## png ## 2 Note that pdf is the only format that supports saving several pages: pdf(file=&quot;myfile_pages.pdf&quot;) plot(1:10) plot(2:20) dev.off() ## png ## 2 Plot several figures in one page You can output more than one plot per page using the par() function (sets graphical parameters) and the mfrow argument. jpeg(file=&quot;myfile_multi.jpeg&quot;) # organize the plot in 1 row and 2 columns: # nr: number of rows # nc: number of columns par(mfrow=c(nr=1, nc=2)) plot(1:10) plot(2:20) dev.off() ## png ## 2 jpeg(file=&quot;myfile_multi4.jpeg&quot;) # organize the plot in 2 rows and 2 columns par(mfrow=c(nr=2, nc=2)) # top-left plot(1:10) # top-right barplot(table(rep(c(&quot;A&quot;,&quot;B&quot;), c(2,3)))) # bottom-left pie(table(rep(c(&quot;A&quot;,&quot;B&quot;), c(2,3)))) # bottom-right hist(rnorm(2000)) dev.off() ## png ## 2 "],
["exercise-11-base-plots.html", "17.3 Exercise 11: Base plots", " 17.3 Exercise 11: Base plots Create the script “exercise11.R” and save it to the “Rcourse/Module3” directory: you will save all the commands of exercise 11 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module3&quot;) 17.3.1 Exercise 11a- scatter plot 1- Create the following data frame genes &lt;- data.frame(sample1=rnorm(300), sample2=rnorm(300)) 2- Create a scatter plot showing sample1 (x-axis) vs sample2 (y-axis) of genes. correction plot(genes$sample1, genes$sample2) 3- Change the point type and color. correction plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3) 4- Change x-axis and y-axis labels to “Sample 1” and “Sample 2”, respectively. correction plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3, xlab=&quot;Sample 1&quot;, ylab=&quot;Sample 2&quot;) 5- Add a title to the plot. correction plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3, xlab=&quot;Sample 1&quot;, ylab=&quot;Sample 2&quot;, main=&quot;scatter plot&quot;) 6- Add a vertical red line that starts at the median expression value of sample 1. Do it in two steps: a. calculate the median expression of genes in sample 1. b. plot a vertical line using abline(). correction # median expression of sample1 med1 &lt;- median(genes$sample1) # plot plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3, xlab=&quot;Sample 1&quot;, ylab=&quot;Sample 2&quot;, main=&quot;scatter plot&quot;) # vertical line abline(v=med1, col=&quot;red&quot;) 17.3.2 Exercise 11b- bar plot + pie chart 1- Create the following vector genes_significance &lt;- rep(c(&quot;enriched&quot;, &quot;depleted&quot;, &quot;none&quot;), c(20, 32, 248)) 2- The vector describes whether a gene is up- (enriched) or down- (depleted) regulated, or not regulated (none). Produce a barplot that displays this information: how many genes are enriched, depleted, or not regulated. correction barplot(table(genes_significance)) 3- Color the bars of the boxplot, each in a different color (3 colors of your choice) correction barplot(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;)) 4- Use the argument “names.arg” in barplot() to rename the bars: Change depleted to “Down”, enriched to “Up”, none to “Not significant” correction barplot(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;), names.arg=c(&quot;Down&quot;, &quot;Up&quot;, &quot;Not significant&quot;)) 5- The “las” argument allow to rotate the x-axis labels for a better visibility. Try value 2 for las: what happens? correction barplot(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;), names.arg=c(&quot;Down&quot;, &quot;Up&quot;, &quot;Not significant&quot;), las=2) 6- Create a pie chart of the same information (Enriched, Depleted, None) correction pie(table(genes_significance)) Change the color of the slices, modify the labels, and add a title. correction pie(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;), main=&quot;pie chart&quot;, labels=c(&quot;Down&quot;, &quot;Up&quot;, &quot;Not significant&quot;)) 17.3.3 Exercise 11c- histogram 1- Use genes object from exercise 11a to create a histogram of the gene expression distribution of sample 1. correction hist(genes$sample1) 2- Repeat the histogram but change argument breaks to 50. What is the difference ? correction hist(genes$sample1, breaks=50) 3- Color this histogram in light blue. correction hist(genes$sample1, breaks=50, col=&quot;lightblue&quot;) 4- Zoom in the histogram: show only the distribution of expression values from 0 to 2 (x-axis) using the xlim argument. correction hist(genes$sample1, breaks=50, col=&quot;lightblue&quot;, xlim=c(0, 2)) 5- Save the histogram in a pdf file. correction pdf(&quot;myhistogram.pdf&quot;) hist(genes$sample1, breaks=50, col=&quot;lightblue&quot;, xlim=c(0, 2)) dev.off() ## png ## 2 "],
["plots-from-other-packages.html", "Part18 Plots from other packages", " Part18 Plots from other packages We will see two additional types of plots: Heat map (package gplots) Venn diagram (from package VennDiagram) "],
["heatmap-2-function-from-gplots-package.html", "18.1 heatmap.2 function from gplots package", " 18.1 heatmap.2 function from gplots package A heatmap is a graphical representation of data where the values are represented with colors. The heatmap.2 function from the gplots package allows to produce highly customizable heatmaps. # install gplots package install.packages(&quot;gplots&quot;) # load package library(&quot;gplots&quot;) # make matrix mat &lt;- matrix(rnorm(1200), ncol=6) # heatmap with the defaults parameters heatmap.2(x=mat) Useful arguments include: Rowv, Colv : process clustering of columns or rows (default TRUE to both) dendrogram : show dendrogram for row, col, both or none scale : scale data per row, column, or none col : dendrogram color palette trace : control the cyan density lines RowSideColors, ColSideColors : block of colors that represent the columns or the rows labRow,labCol : remove or keep row or col labels main : title xlab, ylab: x-axis or y-axis label heatmap.2(x=mat, Colv=FALSE, dendrogram=&quot;row&quot;, scale=&quot;row&quot;, col=&quot;bluered&quot;, trace=&quot;none&quot;, ColSideColors=rep(c(&quot;green&quot;,&quot;orange&quot;), each=3), labRow=FALSE, main=&quot;my heatmap&quot;, ylab=&quot;Genes&quot;, xlab=&quot;Samples&quot;) "],
["venn-diagram-function-from-venndiagram-package.html", "18.2 venn.diagram function from VennDiagram package", " 18.2 venn.diagram function from VennDiagram package A Venn diagram shows all possible logical relations between data sets. The venn.diagram function from the VennDiagram package allows to create up to a 5-way Venn Diagram (i.e. 5 circles representing 5 data sets). # load package library(VennDiagram) # Prepare character vectors v1 &lt;- c(&quot;DKK1&quot;, &quot;NPC1&quot;, &quot;NAPG&quot;, &quot;ERG&quot;, &quot;VHL&quot;, &quot;BTD&quot;, &quot;MALL&quot;, &quot;HAUS1&quot;) v2 &lt;- c(&quot;SMAD4&quot;, &quot;DKK1&quot;, &quot;ASXL3&quot;, &quot;ERG&quot;, &quot;CKLF&quot;, &quot;TIAM1&quot;, &quot;VHL&quot;, &quot;BTD&quot;, &quot;EMP1&quot;, &quot;MALL&quot;, &quot;PAX3&quot;) v3 &lt;- c(&quot;PAX3&quot;, &quot;SMAD4&quot;, &quot;DKK1&quot;, &quot;MALL&quot;, &quot;ERG&quot;, &quot;CDKN2A&quot;, &quot;DENR&quot;, &quot;NPC1&quot;, &quot;NAPG&quot;) # Create a list of vectors vlist &lt;- list(v1, v2, v3) names(vlist) &lt;- c(&quot;list1&quot;, &quot;list2&quot;, &quot;list3&quot;) # 2-way Venn venn.diagram(vlist[1:2], filename=&quot;Venn_2way.png&quot;, imagetype=&quot;png&quot;) ## [1] 1 # 3-way Venn venn.diagram(vlist, filename=&quot;Venn_3way.png&quot;, imagetype=&quot;png&quot;) ## [1] 1 More arguments: main : title sub : sub-title main.col : color of title font fill : color of circles col : color of circle lines cat.col : color of category labels venn.diagram(vlist, filename=&quot;Venn_3way_more.png&quot;, imagetype=&quot;png&quot;, main=&quot;Venn diagram&quot;, sub=&quot;3-way&quot;, main.col=&quot;red&quot;, fill=c(&quot;lightgreen&quot;, &quot;lightblue&quot;, &quot;lightsalmon&quot;), col=c(&quot;lightgreen&quot;, &quot;lightblue&quot;, &quot;lightsalmon&quot;), cat.col=c(&quot;green&quot;, &quot;blue&quot;, &quot;salmon&quot;)) ## [1] 1 "],
["ggplot2-package.html", "Part19 ggplot2 package", " Part19 ggplot2 package Graphing package inspired by the Grammar of Graphics work of Leland Wilkinson. A tool that enables to concisely describe the components of a graphic. Why ggplot2 ? Flexible Customizable Pretty ! Well documented We will see: Scatter plots Box plots Dot plots Bar plots Histograms How to save plots Volcano plots "],
["getting-started.html", "19.1 Getting started", " 19.1 Getting started All ggplots start with a base layer created with the ggplot() function: ggplot(data=dataframe, mapping=aes(x=column1, y=column2)) The base layer is setting the grounds but NOT plotting anything Add a layer (with the + sign) that describes what kind of plot you want. "],
["scatter-plot.html", "19.2 Scatter plot", " 19.2 Scatter plot # Example of a scatter plot: add the geom_point() layer ggplot(data=dataframe, mapping=aes(x=column1, y=column2)) + geom_point() Example of a simple scatter plot: # Create a data frame df1 &lt;- data.frame(sample1=rnorm(200), sample2=rnorm(200)) # Plot ! ggplot(data= df1 , mapping=aes(x=sample1, y=sample2)) + geom_point() Add layers to that object to customize the plot: ggtitle to add a title geom_vline to add a vertical line etc. ggplot(data= df1 , mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(label=&quot;my first ggplot&quot;) + geom_vline(xintercept=0) Bookmark that ggplot2 reference and that good cheatsheet for some of the ggplot2 options. You can save the plot in an object at any time and add layers to that object: # Save in an object p &lt;- ggplot(data= df1 , mapping=aes(x=sample1, y=sample2)) + geom_point() # Add layers to that object p + ggtitle(label=&quot;my first ggplot&quot;) What is inside the aes (aesthetics)function ? Anything that varies according to your data ! Columns with values to be plotted. Columns with which you want to, for example, color the points. Color all points in red (not depending on the data): ggplot(data=df1 , mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;) Color the points according to another column in the data frame: # Build a data frame from df1: add a column with &quot;yes&quot; and &quot;no&quot; df2 &lt;- data.frame(df1, grouping=rep(c(&quot;yes&quot;, &quot;no&quot;), c(80, 120))) # Plot and add the color parameter in the aes(): pscat &lt;- ggplot(data=df2, mapping=aes(x=sample1, y=sample2, color=grouping)) + geom_point() "],
["box-plots-1.html", "19.3 Box plots", " 19.3 Box plots Simple boxplot showing the data distribution of sample 1: ggplot(data=df2, mapping=aes(x=&quot;&quot;, y=sample1)) + geom_boxplot() Split the data into 2 boxes: ggplot(data=df2, mapping=aes(x=grouping, y=sample1)) + geom_boxplot() What if you want to plot both sample1 and sample2 ? You need to convert into a long format Plotting both sample1 and sample2: # install package reshape2 install.packages(&quot;reshape2&quot;) # load package library(&quot;reshape2&quot;) # convert to long format df_long &lt;- melt(data=df2) # all numeric values are organized into only one column: value # plot: ggplot(data=df_long, mapping=aes(x=variable, y=value)) + geom_boxplot() What if now you also want to see the distribution of “yes” and “no” in both sample1 and sample2 ? Integrate a parameter to the aes() # Either color (color of the box border) ggplot(data=df_long, mapping=aes(x=variable, y=value, color=grouping)) + geom_boxplot() # Or fill (color inside the box) ggplot(data=df_long, mapping=aes(x=variable, y=value, fill=grouping)) + geom_boxplot() Do you want to change the default colors? * Integrate either layer: * scale_color_manual() * scale_fill_manual pbox &lt;- ggplot(data=df_long, mapping=aes(x=variable, y=value, fill=grouping)) + geom_boxplot() + scale_fill_manual(values=c(&quot;slateblue2&quot;, &quot;chocolate&quot;)) "],
["dot-plots.html", "19.4 Dot plots", " 19.4 Dot plots Example of the expression of a gene in 6 samples: 2 experimental groups in triplicates. # create a named vector with the expression of a gene mygene &lt;- c(8.1, 8.2, 8.6, 8.7, 9.4, 8.5) # the names of each element of the vector are sample names names(mygene) &lt;- c(&quot;KO1&quot;, &quot;KO2&quot;, &quot;KO3&quot;, &quot;WT1&quot;, &quot;WT2&quot;, &quot;WT3&quot;) # transform to long format mygenelong &lt;- melt(data=mygene) # add new columns containing sample names and experimental groups mygenelong$sample_name &lt;- rownames(mygenelong) mygenelong$group &lt;- gsub(&quot;[1-3]{1}&quot;, &quot;&quot;, mygenelong$sample_name) # dot plot # add labels with &quot;label&quot; in the aes() and layer geom_text() # nudge_x adjust the labels horizontally pdot &lt;- ggplot(data=mygenelong, mapping=aes(x=group, y=value, col=group, label=sample_name)) + geom_point() + geom_text(nudge_x=0.2) Add more layers: xlab() to change the x axis label ylab() to change the y axis label theme to manage the legend pdot + xlab(label=&quot;Experimental group&quot;) + ylab(label=&quot;Normalized expression (log2)&quot;) + ggtitle(label=&quot;Expression of gene 1&quot;) + theme_bw() + theme(legend.position=&quot;none&quot;) "],
["bar-plots-1.html", "19.5 Bar plots", " 19.5 Bar plots # A simple bar plot ggplot(data=df2, mapping=aes(x=grouping)) + geom_bar() Customize: scale_x_discrete is used to handle x-axis title and labels coord_flip swaps the x and y axis # Save the plot in the object &quot;p&quot; pbar &lt;- ggplot(data=df2, mapping=aes(x=grouping, fill=grouping)) + geom_bar() # Change x axis label with scale_x_discrete and change order of the bars: p2 &lt;- pbar + scale_x_discrete(name=&quot;counts of yes / no&quot;, limits=c(&quot;yes&quot;, &quot;no&quot;)) # Swapping x and y axis with coord_flip(): p3 &lt;- p2 + coord_flip() # Change fill p4 &lt;- p3 + scale_fill_manual(values=c(&quot;yellow&quot;, &quot;cyan&quot;)) # Show intermediary and final plots pbar p2 p3 p4 "],
["histograms-1.html", "19.6 Histograms", " 19.6 Histograms Simple histogram on one sample (using the df2 data frame): ggplot(data=df1, mapping=aes(x=sample1)) + geom_histogram() Histogram on more samples (using df_long): ggplot(data=df_long, mapping=aes(x=value)) + geom_histogram() Split the data per sample (“variable” column that represents here the samples): ggplot(data=df_long, mapping=aes(x=value, fill=variable)) + geom_histogram() By default, the histograms are stacked: change to position dodge (side by side): phist &lt;- ggplot(data=df_long, mapping=aes(x=value, fill=variable)) + geom_histogram(position=&#39;dodge&#39;) "],
["about-themes.html", "19.7 About themes", " 19.7 About themes You can change the default global theme (background color, grid lines etc. all non-data display): # go back to a previous plot p &lt;- ggplot(data=df_long, mapping=aes(x=value)) + geom_histogram() # Try different themes p + theme_bw() p + theme_minimal() p + theme_void() p + theme_grey() p + theme_dark() p + theme_light() "],
["saving-plots-in-files.html", "19.8 Saving plots in files", " 19.8 Saving plots in files The same as for regular plots applies: png(&quot;myggplot.png&quot;) p dev.off() You can also use the ggplot2 ggsave function: # By default, save the last plot that was produced ggsave(filename=&quot;lastplot.png&quot;) # You can pick which plot you want to save: ggsave(filename=&quot;myplot.png&quot;, plot=p) # Many different formats are available: # &quot;eps&quot;, &quot;ps&quot;, &quot;tex&quot;, &quot;pdf&quot;, &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;svg&quot;, &quot;wmf&quot; ggsave(filename=&quot;myplot.ps&quot;, plot=p, device=&quot;ps&quot;) # Change the height and width (and their unit): ggsave(filename=&quot;myplot.pdf&quot;, width = 20, height = 20, units = &quot;cm&quot;) You can also organize several plots on one page One way is to use the gridExtra package: ncol, nrow: arrange plots in such number of columns and rows install.packages(&quot;gridExtra&quot;) # load package library(gridExtra) # 2 rows and 2 columns grid.arrange(pscat, pbox, pbar, phist, nrow=2, ncol=2) # 1 row and 4 columns grid.arrange(pscat, pbox, pbar, phist, nrow=1, ncol=4) WARNING !!: ggsave and grid.arrange are not directly compatible. To save a file organized by grid.arrange, use the regular functions (pdf, png etc.) jpeg(&quot;grid_arrange_plots.jpg&quot;) grid.arrange(pscat, pbox, pbar, phist, nrow=1, ncol=4) dev.off() "],
["exercise-12-ggplot2.html", "19.9 Exercise 12: ggplot2", " 19.9 Exercise 12: ggplot2 Create the script “exercise12.R” and save it to the “Rcourse/Module3” directory: you will save all the commands of exercise 12 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module3&quot;) 19.9.1 Exercise 12a- Scatter plot 1- Load ggplot2 package correction library(ggplot2) 2- Download the data we will use for plotting: download.file(&quot;https://raw.githubusercontent.com/sarahbonnin/CRG_RIntroduction/master/ex12_normalized_intensities.csv&quot;, &quot;ex12_normalized_intensities.csv&quot;, method=&quot;curl&quot;) 3- Read file into object “project1” About this file: * It is comma separated (csv format) * The first row is the header * Take the row names from the first column correction project1 &lt;- read.table(&quot;ex12_normalized_intensities.csv&quot;, sep=&quot;,&quot;, header=TRUE, row.names = 1) 4- Using ggplot, create a simple scatter plot representing gene expression of “sampleB” on the x-axis and “sampleH” on the y-axis. correction ggplot(data=project1, mapping=aes(x=sampleB, y=sampleH)) + geom_point() 5- Create an extra column to the data frame “project1” (you can call this column “expr_limits”): if the expression of a gene is &gt; 13 in both sampleB and sampleH, set to “high”; if the expression of a gene is &lt; 6 in both sampleB and sampleH, set to “low”; if different, set to “normal”. correction # Initialize all values to &quot;normal&quot; project1$expr_limits &lt;- &quot;normal&quot; # &quot;high&quot; if project1$sampleB &gt; 13 and project1$sampleH &gt; 13 project1$expr_limits[project1$sampleB &gt; 13 &amp; project1$sampleH &gt; 13] &lt;- &quot;high&quot; # &quot;low&quot; if project1$sampleB &lt; 6 and project1$sampleH &lt; 6 project1$expr_limits[project1$sampleB &lt; 6 &amp; project1$sampleH &lt; 6] &lt;- &quot;low&quot; 6- Color the points of your scatter plot according to the newly created column “expr_limits”. Save that plot in the object “p” correction p &lt;- ggplot(data=project1, mapping=aes(x=sampleB, y=sampleH, color=expr_limits)) + geom_point() 7- Add a layer to “p” in order to change the points colors to blue (for low), grey (for normal) and red (for high). Save this plot in the object “p2”. correction p2 &lt;- p + scale_color_manual(values=c(&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;)) 8- Save p2 in a jpeg file. a. Try with RStudio Plots window (Export) b. Try in the console: correction jpeg(&quot;myscatterggplot.jpg&quot;) p2 dev.off() ## png ## 2 19.9.2 Exercise 12b- Box plot 1- Convert “project1” from a wide format to a long format: save in the object “project_long” Note: remember melt function from reshape2 package. correction library(reshape2) project_long &lt;- melt(data=project1) 2- Produce a boxplot of the expression of all samples (each sample should be represented by a box) correction ggplot(data=project_long, mapping=aes(x=variable, y=value)) + geom_boxplot() 3- Modify the previous boxplot so as to obtain 3 “sub-boxplots”&quot; per sample, each representing the expression of either “low”, “normal” or “high” genes. correction ggplot(data=project_long, mapping=aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() 4- Rotate the x-axis labels (90 degrees angle). This is new ! Google it !! correction ggplot(data=project_long, mapping=aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90)) 5- Finally, add a title to the plot. correction ggplot(data=project_long, mapping=aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90)) + ggtitle(&quot;My boxplots&quot;) 19.9.3 Exercise 12c- Bar plot 1- Produce a bar plot of how many low/normal/high genes are in the column “expr_limits” of “project1”. correction ggplot(data=project1, mapping=aes(x=expr_limits)) + geom_bar() 2- Add an horizontal line at counts 250 (y-axis). Save the plot in the object “bar” correction bar &lt;- ggplot(data=project1, mapping=aes(x=expr_limits)) + geom_bar() + geom_hline(yintercept=250) 3- Swap the x and y axis. Save in bar2. correction bar2 &lt;- bar + coord_flip() 4- Save “bar” and “bar2” plots in a “png” file, using the png()** function: use grid.arrange (from the gridExtra package) to organize both plots in one page !** correction png(&quot;mybarplots.png&quot;, width=1000) grid.arrange(bar, bar2, nrow=1, ncol=2) dev.off() ## png ## 2 19.9.4 Exercise 12d- Histogram 1- Create a simple histogram using project_long (column “value”). correction ggplot(data=project_long, mapping=aes(x=value)) + geom_histogram() 2- Notice that you get the following warning message&quot; stat_bin() using bins = 30. Pick better value with binwidth. Set “bins”&quot; parameter of geom_histogram() to 50. correction ggplot(data=project_long, mapping=aes(x=value)) + geom_histogram(bins=50) 3- This histogram plots expression values for All samples. Change the plot so as to obtain one histograms per sample. correction ggplot(data=project_long, mapping=aes(x=value, fill=variable)) + geom_histogram(bins=50) 4- By default, geom_histogram produces a stacked histogram. Change the “position” argument to “dodge”. correction hist1 &lt;- ggplot(data=project_long, mapping=aes(x=value, fill=variable)) + geom_histogram(position=&quot;dodge&quot;) 5- A bit messy ?? Run the following: hist2 &lt;- ggplot(data=project_long, mapping=aes(x=value, fill=variable)) + geom_histogram(bins=50) + facet_grid(~variable) facet_grid() is another easy way to split the views! 6- Change the default colors with scale_fill_manual(). You can try the rainbow() function for coloring. correction hist3 &lt;- hist2 + scale_fill_manual(values=rainbow(8)) 7- Zoom in the plots: set the x-axis limits from from 6 to 13. Add the xlim() layer. correction hist4 &lt;- hist3 + xlim(6, 13) 8- Change the default theme to theme_minimal() correction hist5 &lt;- hist4 + theme_minimal() 9- Save that last plot to a file (format of your choice) with ggsave() correction ggsave(filename=&quot;myhistograms.png&quot;, plot=hist5, device=&quot;png&quot;, width=20) "],
["more-about-the-theme-function.html", "19.10 More about the theme() function", " 19.10 More about the theme() function The theme() allows a precise control of graphical parameters such as axis text, ticks and labels, or legend texts and labels, etc. More details here # Let&#39;s the project_long object from exercise 12, and plot boxplots boxp &lt;- ggplot(data=project_long, aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() # Remove the legend title: boxp + theme(legend.title=element_blank()) # Change font of legend text boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;)) # Put legend on the top of the plot boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;), legend.position=&quot;top&quot;) # Rotate x-axis labels boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;), legend.position=&quot;top&quot;, axis.text.x = element_text(angle = 90)) # Add a color to the plot&#39;s background boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;), legend.position=&quot;top&quot;, axis.text.x = element_text(angle = 90), plot.background = element_rect(fill = &quot;yellow&quot;)) "],
["volcano-plots.html", "19.11 Volcano plots", " 19.11 Volcano plots A volcano plot is a type of scatter plot represents differential expression of features (genes for example): on the x-axis we typically find the fold change and on the y-axis the p-value. # Download the data we will use for plotting download.file(&quot;https://raw.githubusercontent.com/sarahbonnin/CRG_RIntroduction/master/de_df_for_volcano.rds&quot;, &quot;de_df_for_volcano.rds&quot;, method=&quot;curl&quot;) # The RDS format is used to save a single R object to a file, and to restore it. # Extract that object in the current session: tmp &lt;- readRDS(&quot;de_df_for_volcano.rds&quot;) # remove rows that contain NA values de &lt;- tmp[complete.cases(tmp), ] # The basic scatter plot: x is &quot;log2FoldChange&quot;, y is &quot;pvalue&quot; ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point() Doesn’t look quite like a Volcano plot… Convert the p-value into a -log10(p-value) # Convert directly in the aes() p &lt;- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() # Add more simple &quot;theme&quot; p &lt;- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() + theme_minimal() # Add vertical lines for log2FoldChange thresholds, and one horizontal line for the p-value threshold p2 &lt;- p + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) # The significantly differentially expressed genes are the ones found in the upper-left and upper-right corners. # Add a column to the data frame to specify if they are UP- or DOWN- regulated (log2FoldChange respectively positive or negative) # add a column of NAs de$diffexpressed &lt;- &quot;NO&quot; # if log2Foldchange &gt; 0.6 and pvalue &lt; 0.05, set as &quot;UP&quot; de$diffexpressed[de$log2FoldChange &gt; 0.6 &amp; de$pvalue &lt; 0.05] &lt;- &quot;UP&quot; # if log2Foldchange &lt; -0.6 and pvalue &lt; 0.05, set as &quot;DOWN&quot; de$diffexpressed[de$log2FoldChange &lt; -0.6 &amp; de$pvalue &lt; 0.05] &lt;- &quot;DOWN&quot; # Re-plot but this time color the points with &quot;diffexpressed&quot; p &lt;- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed)) + geom_point() + theme_minimal() # Add lines as before... p2 &lt;- p + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) ## Change point color # 1. by default, it is assigned to the categories in an alphabetical order): p3 &lt;- p2 + scale_color_manual(values=c(&quot;blue&quot;, &quot;black&quot;, &quot;red&quot;)) # 2. to automate a bit: ceate a named vector: the values are the colors to be used, the names are the categories they will be assigned to: mycolors &lt;- c(&quot;blue&quot;, &quot;red&quot;, &quot;black&quot;) names(mycolors) &lt;- c(&quot;DOWN&quot;, &quot;UP&quot;, &quot;NO&quot;) p3 &lt;- p2 + scale_colour_manual(values = mycolors) # Now write down the name of genes beside the points... # Create a new column &quot;delabel&quot; to de, that will contain the name of genes differentially expressed (NA in case they are not) de$delabel &lt;- NA de$delabel[de$diffexpressed != &quot;NO&quot;] &lt;- de$gene_symbol[de$diffexpressed != &quot;NO&quot;] ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=delabel)) + geom_point() + theme_minimal() + geom_text() # Finally, we can organize the labels nicely using the &quot;ggrepel&quot; package and the geom_text_repel() function # load library library(ggrepel) # plot adding up all layers we have seen so far ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=delabel)) + geom_point() + theme_minimal() + geom_text_repel() + scale_color_manual(values=c(&quot;blue&quot;, &quot;black&quot;, &quot;red&quot;)) + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) "],
["introduction-to-exploratory-data-analysis-descriptive-statistics-.html", "Part20 Introduction to Exploratory Data Analysis &amp; Descriptive Statistics.&quot;", " Part20 Introduction to Exploratory Data Analysis &amp; Descriptive Statistics.&quot; Objectives: To learn how to analyze data sets, applying methods of descriptive statistics and visualization in R. “In statistics, Exploratory Data Analysis (EDA) is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. A statistical model can be used or not, but primarily EDA is for seeing what the data can tell us beyond the formal modeling or hypothesis testing task.”&quot; (Wikipedia) “Descriptive statistics aims to summarize a sample, rather than use the data to learn about the population that the sample of data is thought to represent. This generally means that descriptive statistics, unlike inferential statistics, are not developed on the basis of probability theory.”&quot; (Wikipedia) "],
["exploratory-data-analysis.html", "20.1 Exploratory Data Analysis", " 20.1 Exploratory Data Analysis We will use the package “car”. For details on this package, see https://cran.r-project.org/web/packages/car/car.pdf # install.packages(&quot;car&quot;) - run this code if you do not have the &quot;car&quot; package installed library(car) Let’s explore the dataset “Davis” from the car package. It is called “Self-Reports of Height and Weight Description”. The subjects were men and women engaged in regular exercise. This data frame contains the following columns: - sex - F, female; M, male - weight - measured weight in kg - height - measured height in cm - repwt - reported weight in kg - repht - reported height in cm ?Davis data &lt;- Davis 20.1.1 Data dimentionality: functions str(), summary(), head(), tail() dim(data) str(data) head(data) tail(data) summary(data) # shows quantiles for each column and how many NA !!!! 20.1.2 Missing (NA) values in data: functions complete.cases(), na.omit(), all.equal() How many rows do not contain missing values (i.e., not a single ‘NA’)? sum(complete.cases(data)) x &lt;- data[complete.cases(data), ] # here they are y &lt;- na.omit(data) all.equal(x,y) Excercise using complete_cases(): How many rows contain missing values (i.e., at least one ‘NA’)? 20.1.3 Looking at the subset of data d &lt;- data[data$weight &lt; 60,] # rows with weight below 60 kg str(d) summary(d) x &lt;- data[data$weight &gt; 50 &amp; data$repwt &lt;= 66,] x # the result looks strange!? x[!complete.cases(x),] na.omit(x) # we cannot do this because this removes rows that contain at least one NA in any column y &lt;- data[data$weight &gt; 50 &amp; data$repwt &lt;= 66 &amp; !is.na(data$repwt), ] y dim(y) y[!complete.cases(y), ] 20.1.4 Excercises on data subsetting and missing values How many people shorter than 170 cm reported that they are taller? x &lt;- data[data$height &lt; 170 &amp; data$repht &gt;= 170 &amp; !is.na(data$repht), ] nrow(x) What proportion of men in the dataset did not report their height? And women? x &lt;- data[data$sex == &#39;M&#39; &amp; is.na(data$repht), ] nrow(x) nrow(x)/nrow(data[data$sex == &#39;M&#39;, ]) nrow(data[data$sex == &#39;F&#39; &amp; is.na(data$repht), ]) / nrow(data[data$sex == &#39;F&#39;, ]) Is it true that the same men who did not report height did not also report weight? all.equal(data[data$sex == &#39;M&#39; &amp; is.na(data$repht), ], data[data$sex == &#39;M&#39; &amp; is.na(data$repwt), ]) 20.1.5 Exploring a particular variable (column): functions unique(), table() length(data$repwt) summary(data$repwt) sum(is.na(data$repwt)) # count NA table(is.na(data$repwt)) # table of how many complete data (FALSE) and how many missing (TRUE) for data$repwt unique(data$repwt) # shows unique values for a specified column (NA is considered) length(unique(data$repwt)) unique(na.omit(data$repwt)) # shows unique values for a specified column (NA is omitted) length(unique(na.omit(data$repwt))) table(data$repwt) # how many data with the same repwt data.frame(table(data$repwt)) # same as above shown as a data frame table(data$repwt, useNA = &quot;ifany&quot;) # by default table() doesn&#39;t show missing values data.frame(table(data$repwt, useNA = &quot;ifany&quot;)) 20.1.6 Exploring relationships between variables: functions table(), cut(), and functions for factors levels(), nlevels() table(data$sex) # table() builds a contingency table of the counts at each combination of factor levels table(data$sex, data$weight) # shows relationships between variables table(data$sex, data$weight &lt; 80) # gives the 2x2 contingency table m &lt;- table(data$sex, data$weight &lt; 80) # save it as a matrix colnames(m) &lt;- c(&quot;weight &gt;= 80&quot;,&quot;weight &lt; 80&quot;) # add names to columns rownames(m) &lt;- c(&quot;Female&quot;,&quot;Male&quot;) # add names to rows m # check it out table(data$weight) intervals_weight &lt;- cut(data$weight, breaks = seq(30, 170, 20)) table(intervals_weight) table(intervals_weight, data$sex) # contigency table of sex by intervals class(intervals_weight) levels(intervals_weight) nlevels(intervals_weight) table(data$height) intervals_height &lt;- cut(data$height, breaks = seq(55, 200, 20)) table(intervals_weight, intervals_height) 20.1.7 Excercises using unique(), table() and cut() Let’s assume that a person with the minimum height, or == min(data$height), is a wrong entry in the dataset and exclude it from the analysis. How many unique values are there for the height? x &lt;- data[!data$height == min(data$height), ] unique(x$height) length(unique(x$height)) How many intervals for the height will be obtained at breaks of 10 cm from minimum to maximum height. Use min() and max() in function seq() and nlevels() – be careful to include maximum value for height in the last interval. min(x$height) max(x$height) intervals_height &lt;- cut(x$height, breaks = seq(min(x$height), max(x$height)+1, 10)) nlevels(intervals_height) How many women are in the last two intervals? (just by looking at the table) table(intervals_height, x$sex) "],
["descriptive-statistics.html", "20.2 Descriptive Statistics", " 20.2 Descriptive Statistics 20.2.1 Functions: mean, sd, var, min, max, median, range, IQR, quantile. All these function require special treatment for missing values, using parameter na.rm = TRUE. min(data$repwt) ?min min(data$repwt, na.rm = TRUE) max(data$repwt, na.rm = TRUE) range(data$repwt, na.rm = TRUE) range(data$repwt, na.rm = TRUE)[1] == min(data$repwt, na.rm = TRUE) range(data$repwt, na.rm = TRUE)[2] == max(data$repwt, na.rm = TRUE) mean(data$repwt, na.rm = TRUE) median(data$repwt, na.rm = TRUE) quantile(data$repwt, na.rm = TRUE) # shows quantiles for values in a specific column, ignoring &#39;NA&#39; quantile(data$repwt, na.rm = TRUE, probs = c(0, 0.25, 0.5, 0.75, 1)) # standard quantiles (or quartiles) quantile(data$repwt, na.rm = TRUE, probs = c(0, 0.1, 0.9, 1)) # any other quantiles IQR(data$repwt, na.rm = TRUE) IQR(data$repwt, na.rm = TRUE) == quantile(data$repwt, na.rm = TRUE)[4] - quantile(data$repwt, na.rm = TRUE)[2] # contigency table of quantiles of weight versus quantiles of repwt x &lt;- data$weight any(is.na(x)) y &lt;- data$repwt any(is.na(y)) table(cut(x, quantile(x)), cut(y, quantile(y, na.rm = TRUE))) 20.2.2 Functions tapply() and round() var(data$repwt, na.rm = TRUE) ?var sd(data$repwt, na.rm = TRUE) sd(data$repwt, na.rm = TRUE) == sqrt(var(data$repwt, na.rm = TRUE)) sd(data$repwt, na.rm = TRUE) ** 2 == var(data$repwt, na.rm = TRUE) # function tapply() ?tapply tapply(data$weight, data$sex, mean) tapply(data$weight, data$sex, quantile) tapply(data$weight, data$sex, quantile)$F 20.2.3 Excercises How many women have weight below (or equal) median AND height above median? d &lt;- data[data$sex == &quot;F&quot;, ] # strightforward solution nrow(d[d$weight &lt;= median(d$weight) &amp; d$height &gt; median(d$height), ]) # solution using table, cut and quantile x &lt;- d$weight y &lt;- d$height table(cut(x, quantile(x)), cut(y, quantile(y, na.rm = TRUE))) z &lt;- table(cut(x, quantile(x, probs = c(0, 0.5, 1))), cut(y, quantile(y, probs = c(0, 0.5, 1)))) z[3] How many women have weight in the lower 5% quantile AND height in the upper 5% quantile? What is the difference of the mean and sd values of the reported height between men and women (round reported values to one digit)? 20.2.4 Data visualization: boxplot() boxplot(data$weight) y &lt;- median(data$weight) segments(0, y, 1, y, lwd = 3, col = &quot;red&quot;) y &lt;- mean(data$weight) segments(0, y, 1, y, lwd = 3, col = &quot;blue&quot;) y &lt;- mean(data$weight) - sd(data$weight) segments(0, y, 1, y, lwd = 3, col = &quot;green&quot;) y &lt;- mean(data$weight) + sd(data$weight) segments(0, y, 1, y, lwd = 3, col = &quot;green&quot;) y &lt;- quantile(data$weight)[1] segments(0, y, 1, y, lwd = 3, col = &quot;orange&quot;) y &lt;- quantile(data$weight)[2] segments(0, y, 1, y, lwd = 3, col = &quot;magenta&quot;) y &lt;- quantile(data$weight)[4] segments(0, y, 1, y, lwd = 3, col = &quot;cyan&quot;) y &lt;- quantile(data$weight)[5] segments(0, y, 1, y, lwd = 3, col = &quot;orange&quot;) 20.2.5 Outliers Can be defined (by the Tuley’s test) as values in the sample that differ from the Q1 (25% quantile) or Q3 (75% quantile) by more than 1.5 x IQR (where IQR = Q3 - Q1). However, there is no formal definition of outliers; they need to be treated subjectively. quantile(data$weight) lower_limit &lt;- quantile(data$weight)[2] - 1.5 * IQR(data$weight) # values below this limit are outliers lower_limit min(data$weight) &lt; lower_limit # Is the minimum weight an outlier? lower_whisker &lt;- max(min(data$weight), lower_limit) lower_whisker boxplot(data$weight) y &lt;- lower_whisker segments(0, y, 1, y, lwd = 3, col = &quot;black&quot;) upper_limit &lt;- quantile(data$weight)[4] + 1.5 * IQR(data$weight) # values above this limit are outliers upper_limit max(data$weight) &gt; upper_limit # Is the maximum weight an outlier? TRUE or FALSE? upper_whisker = min(max(data$weight), upper_limit) upper_whisker y &lt;- upper_whisker segments(0, y, 1, y, lwd = 3, col = &quot;black&quot;) #show outliers data[data$weight &gt; upper_whisker, ] 20.2.6 How statistics change if to remove outliers # We can remove all &quot;formal&quot; outliers d &lt;- data[data$weight &lt;= upper_whisker, ] # While it is better to remove only those that have no sense d &lt;- data[data$weight != max(data$weight), ] # Did mean change? mean(d$weight) mean(data$weight) # Did median change? median(data$weight) median(d$weight) # Did SD change? sd(data$weight) sd(d$weight) boxplot(d$weight) boxplot(d$weight, outline = FALSE) # boxplot has a parameter &quot;outline&quot; not to show outliers! "],
["more-basic-plots.html", "20.3 More basic plots", " 20.3 More basic plots 20.3.1 How to plot box-plots side-by-side on one graph boxplot(data$weight ~ data$sex) boxplot(data$weight ~ data$sex, outline = FALSE) colors &lt;- c(&quot;blue&quot;, &quot;red&quot;) ylab &lt;- &quot;weight, kg&quot; boxplot(data$weight ~ data$sex, outline = FALSE, border = colors, ylab = ylab) 20.3.2 Excercise: Make a similar boxplot using ggplot() #install.packages(&quot;ggplot2&quot;) library(ggplot2) ggplot(data=data, aes(x=sex, y=weight)) + geom_boxplot() p &lt;- ggplot(data=data, aes(x=sex, y=weight, col=sex)) + geom_boxplot(outlier.shape = NA) p &lt;- p + scale_y_continuous(limits = quantile(data$weight, c(0.1, 0.9))) p &lt;- p + theme_bw() p &lt;- p + ylab(label=ylab) + xlab(label=&quot;&quot;) p &lt;- p + scale_color_manual(values=colors) p &lt;- p + theme(legend.position=&quot;none&quot;) p 20.3.3 How to plot together data from two or more vectors of different lengths #install.packages(&quot;reshape2&quot;) library(reshape2) # for melt() to use below for transforming a data frame from the wide to the long format # let&#39;s make two vectors first d &lt;- data[data$weight != max(data$weight), ] male &lt;- d[d$sex ==&quot;M&quot;, ] female &lt;- d[d$sex ==&quot;F&quot;, ] m &lt;- male$weight f &lt;- female$weight length(m) length(f) # make a data frame on a long format x &lt;- data.frame( value = m, variable = rep(&quot;Male&quot;, length(m)) ) y &lt;- data.frame( value = f, variable = rep(&quot;Female&quot;, length(f)) ) df &lt;- rbind(x,y) boxplot(data = df, value ~ variable) 20.3.4 How to make a box-plot more informative and customized # Define the plot parameters y_limits &lt;- c(30, 140) colors &lt;- c(&quot;blue&quot;, &quot;red&quot;) ylab &lt;- &quot;Weight, kg&quot; title &lt;- &quot;Distribution of weight by sex&quot; boxplot(data = df, value ~ variable, outline = FALSE, #pars = list(boxwex = .4), ylab = ylab, cex.lab = 1.5, #to change (multiply) the font size of the axes legends cex.axis = 1.2, #to change (multiply) the font size of the axes ylim = y_limits, border = colors, #color the boxplot borders boxwex = 0.6, staplewex = 0.4, frame.plot = FALSE, #this removes upper and right borders on the plot area outwex = 0.5, cex.main = 1.5, #to change (multiply) the size of the title main = title # the title of the graph ) stripchart(data = df, value ~ variable, col = colors, method = &quot;jitter&quot;, jitter = .2, pch = c(16, 15), cex = c(1.0, 1.0), #different points and of different size can be used vertical = TRUE, add = TRUE) # let&#39;s show the (yet unknown) p-value on the plot text &lt;- &quot;p-value = ...&quot; y &lt;- 130 # y position of the horizontal line offset &lt;- 5 # length of vertical segments x &lt;- 1 segments(x, y, x + 1, y) segments(x, y - offset, x, y) segments(x + 1, y - offset, x + 1, y) text(x + 0.5, y + offset, paste(text), cex = 1) #cex defines the font size of the text 20.3.5 Histogram hist(data$weight) hist(d$weight) 20.3.6 Control for the size of bins bin_size &lt;- 5 start &lt;- 30 end &lt;- 120 bins &lt;- seq(start, end, by = bin_size) hist(d$weight, breaks = bins, col = &quot;blue&quot;) 20.3.7 Two overlaying histograms on one graph male &lt;- subset(d, sex ==&quot;M&quot;) # we will use data with outliers removed female &lt;- subset(d, sex ==&quot;F&quot;) m &lt;- male$weight f &lt;- female$weight bin_size &lt;- 5 start &lt;- min(min(m), min(f)) - 3*bin_size end &lt;- max(max(m), max(f)) + 3*bin_size bins &lt;- seq(start, end, by = bin_size) xlim = c(start, end) colors &lt;- c(rgb(1, 0, 1, 0.7), rgb(0, 0, 1, 0.5)) # the last number in rgb() is for transparency hist(female$weight, breaks = bins, col = colors[1], xlim = xlim, xlab = &quot;Weight, kg&quot;) hist(male$weight, breaks = bins, add = TRUE, col = colors[2], xlim = xlim) legend(&quot;topright&quot;, legend = c(&quot;Females&quot;, &quot;Males&quot;), fill = colors, bty = &quot;n&quot;, border = NA) 20.3.8 Scatterplot plot(d$weight, d$repwt, pch = 20) # Just a simple plot of reported weights against measured weights plot(d$weight, d$repwt, pch = 20, col = d$sex) # it can be colored by sex, for example legend(&quot;topleft&quot;,legend = c(&quot;Females&quot;, &quot;Males&quot;), col = 1:2, pch = 20) 20.3.9 Function palette() Colors are taken in the order from the currently setup palette() . palette() Palette’s colors can be changed and then reset back to default, using palette(“default”). palette(c(rgb(1, 0, 1, 0.7), &quot;blue&quot;)) # changing palette() plot(d$weight, d$repwt, col = d$sex, pch = 20, xlab = &quot;Measured weight, kg&quot;, ylab = &quot;Reported weight, kg&quot;, main = &quot;Reported versus measured weights by sex&quot;) legend(&quot;bottomright&quot;,legend = c(&quot;Females&quot;, &quot;Males&quot;), col = 1:2, pch = 20, bty = &quot;n&quot;) palette(&quot;default&quot;) # reset back to the default "],
["wrapping-up-everything-you-have-learned-in-this-course.html", "20.4 Wrapping up everything you have learned in this course", " 20.4 Wrapping up everything you have learned in this course The goal is to read data from the file, clean and explore data, and report in the files cleaned data and the results of descriptive statistics (number of observations, mean and SD) of measured variables affected by two drugs independently in women and men. 20.4.1 Read data from the file system(command=&quot;svn export https://github.com/biocorecrg/CRG_RIntroduction/trunk/i_o_files&quot;) conn &lt;- file(&quot;./i_o_files/example_data.txt&quot;, &quot;r&quot;) DATA &lt;- as.data.frame(read.table(conn, header = TRUE, sep = &quot;\\t&quot;)) data &lt;- DATA # we will save DATA to return to it if needed head(data) tail(data) str(data) dim(data) 20.4.2 Remove empty columns # one of the ways to remove unwanted columns x &lt;- data x &lt;- x[, grep(&quot;X.[2-9]&quot;, colnames(x), inv = T)] # be careful here because we will need columns &quot;X&quot; and &quot;X.1&quot; x &lt;- x[, grep(&quot;X.1[0-9]&quot;, colnames(x), inv = T)] colnames(x) # more elegant (and correct) way that doesn&#39;t use grep and doesn&#39;t require knowledge of columns apply(is.na(data), 2, all) data &lt;- data[, !apply(is.na(data), 2, all)] colnames(data) str(data) 20.4.3 Explore, rename and clean variables # rename the colum for sex colnames(data)[2] &lt;- &quot;SEX&quot; table(data$SEX) # and remove rows with SEX other than M and F data &lt;- data[data$SEX %in% c(&quot;F&quot;, &quot;M&quot;), ] # How many rows were removed? # what is the data type of data$SEX? class(data$SEX) levels(data$SEX) # remove unused levels data$SEX &lt;- droplevels(data$SEX) str(data$SEX) Do the same for the column containing information on drugs colnames(data) colnames(data)[colnames(data) == &quot;X.1&quot;] &lt;- &quot;DRUG&quot; data$DRUG table(data$DRUG) data &lt;- data[data$DRUG %in% c(&quot;ART&quot;, &quot;PRG&quot;), ] table(data$DRUG) levels(data$DRUG) data$DRUG &lt;- droplevels(data$DRUG) levels(data$DRUG) 20.4.4 Correct non-numeric values, changing them to NA # you can correct columns one by one x &lt;- as.numeric(as.character(data$U_12)) str(x) # etc.... # more elegant way to correct multiple columns at once df &lt;- data[, !colnames(data) %in% c(&quot;SEX&quot;, &quot;DRUG&quot;)] apply(df, 2, as.numeric) x &lt;- data.frame(apply(df, 2, as.numeric)) # well, we lost columns SEX and DRUGS, let&#39;s add them df &lt;- cbind(SEX=data$SEX, DRUG=data$DRUG, x) data &lt;- df # here is our clean dataset str(data) 20.4.5 Write corrected data frame in the file conn &lt;- file(&quot;corrected_data.txt&quot;, &quot;w&quot;) write.table(data, conn, row.names = F, sep = &quot;\\t&quot;, quote = F) close(conn) # now let&#39;s read corrected data conn &lt;- file(&quot;corrected_data.txt&quot;, &quot;r&quot;) DATA &lt;- as.data.frame(read.table(conn, header = TRUE, sep = &quot;\\t&quot;)) close(conn) all.equal(DATA, data) data &lt;- DATA # we will save DATA to return to it if needed 20.4.6 Explore and remove outliers We are interested in 4 groups (by sex and drug) independently summary(data) #install.packages(&quot;ggplot2&quot;) library(ggplot2) for (num in 4:ncol(data)){ # skip columns SEX, DRUG, ID print(colnames(data)[num]) p &lt;- ggplot(data=data, aes(x = SEX, y = data[ ,num], col = DRUG)) p &lt;- p + geom_boxplot() + ggtitle(paste(colnames(data)[num])) print(p) } # Let&#39;s remove &quot;obvious&quot;&quot; outliers by changing their values to NA # data point below -20 and above 5 in A data$A[data$A &lt; -20] &lt;- NA data$A[data$A &gt; 5] &lt;- NA # data point below -10 in I_6 data$I_6[data$I_6 &lt;= -10] &lt;- NA # data point &lt;-4 in S_6 data$S_6[data$S_6 &lt; -4] &lt;- NA # data point &lt;-9 in I_2 data$I_2[data$I_2 &lt; -9] &lt;- NA # data point above 4 in S_2 data$S_2[data$S_2 &gt; 4] &lt;- NA # data point above 10 in U_2 data$U_2[data$U_2 &gt; 10] &lt;- NA # data point below 10 in D1 data$D1[data$D1 &lt;= 10] &lt;- NA 20.4.7 How to change a value of a specific data point data[data$SEX==&quot;M&quot; &amp; data$DRUG==&quot;ART&quot;,]$E # difficult way df[df$SEX==&quot;M&quot; &amp; df$DRUG==&quot;ART&quot;, ]$E[df[df$SEX==&quot;M&quot; &amp; df$DRUG==&quot;ART&quot;, ]$E == 911] &lt;- 500 # or NA df[df$SEX==&quot;M&quot; &amp; df$DRUG==&quot;ART&quot;,]$E # simpler way df &lt;- data df[df$SEX==&quot;M&quot; &amp; df$DRUG==&quot;ART&quot;,]$E df[df$SEX==&quot;M&quot; &amp; df$DRUG==&quot;ART&quot; &amp; df$E == 911 &amp; !is.na(df$E), ]$E &lt;- 500 df[df$SEX==&quot;M&quot; &amp; df$DRUG==&quot;ART&quot;,]$E 20.4.8 Make a data frame with statistical data #let&#39;s make first a data frame for only one group d &lt;- data[data$SEX == &quot;F&quot; &amp; data$DRUG == &quot;ART&quot;,] result &lt;- list() names &lt;- c(&quot;N&quot;, &quot;mean&quot;, &quot;sd&quot;) count &lt;- 1 for (i in colnames(d)){ print(i) if (i == &quot;SEX&quot; | i == &quot;DRUG&quot; | i == &quot;ID&quot;) next; x &lt;- d[ ,i] x &lt;- x[!is.na(x)] v &lt;- c(i, length(x), mean(x), sd(x)) result[[count]] &lt;- v count &lt;- count + 1 } res &lt;- data.frame(matrix(unlist(result), nrow=count-1, byrow=T)) sex &lt;- &quot;F&quot; drug &lt;- &quot;ART&quot; colnames(res) &lt;- c(&quot;variable&quot;, paste(sex, drug, names,sep=&quot;_&quot;)) # make a data frame for statistics for all groups, re-using the above for-loop df &lt;- data.frame() names &lt;- c(&quot;N&quot;, &quot;mean&quot;, &quot;sd&quot;) for (sex in levels(data$SEX)){ for(drug in levels(data$DRUG)){ d &lt;- data[data$SEX == sex &amp; data$DRUG == drug,] result &lt;- list() count &lt;- 1 for (i in colnames(d)){ print(i) if (i == &quot;SEX&quot; | i == &quot;DRUG&quot; | i == &quot;ID&quot;) next; x &lt;- d[ ,i] x &lt;- x[!is.na(x)] v &lt;- c(i, length(x), mean(x), sd(x)) result[[count]] &lt;- v count &lt;- count + 1 } res &lt;- data.frame(matrix(unlist(result), nrow=count-1, byrow=T), stringsAsFactors=FALSE) colnames(res) &lt;- c(&quot;variable&quot;, paste(sex, drug, names,sep=&quot;_&quot;)) if (dim(df)[1] == 0) { df &lt;- res }else{ df &lt;- cbind.data.frame(df, res) } } } # simplify data frame rownames(df) &lt;- df$variable df &lt;- df[, colnames(df) != &quot;variable&quot;] 20.4.9 Format a data frame # Let&#39;s round all values to two decimal digits x &lt;- lapply(df, function(x) round(as.numeric(x), digits = 2)) x x &lt;- data.frame(x) # we lost rownames! rownames(x) &lt;- rownames(df) df &lt;- x 20.4.10 Write a data frame in the file conn &lt;- file(&quot;Results.txt&quot;, &quot;w&quot;) write.table(df, conn, row.names = T, col.names = NA, sep = &quot;\\t&quot;) close(conn) conn &lt;- file(&quot;Results.csv&quot;, &quot;w&quot;) write.table(df, conn, row.names = T, col.names = NA, sep = &quot;,&quot;) close(conn) 20.4.11 Write a table using as a decimal separator instead of a dot a comma df_comma &lt;- format(df, decimal.mark=&quot;,&quot;) conn &lt;- file(&quot;Results_comma.txt&quot;, &quot;w&quot;) write.table(df_comma, conn, row.names = T, col.names = NA, sep = &quot;\\t&quot;, quote = F) close(conn) "]
]
